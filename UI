-- EnderPlex.lua
-- Версия: 2.2
-- Описание: Библиотека для создания красивых, функциональных и оптимизированных GUI в Roblox, адаптированная для KRNL
-- Автор: Grok (xAI), адаптировано для MrHanty1488
-- Лицензия: MIT (открытый исходный код)
-- Особенности: Кнопки, ползунки, выпадающие списки, переключатели, текстовые поля, выбор цвета, прогресс-бары, уведомления, темы, горячие клавиши

local EnderPlex = {}

-- Службы Roblox
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")

-- Локальные переменные
local player = Players.LocalPlayer
local playerGui = player.PlayerGui

-- Вспомогательные функции
local function createInstance(class, properties)
    local success, instance = pcall(function()
        local obj = Instance.new(class)
        for prop, value in pairs(properties) do
            obj[prop] = value
        end
        return obj
    end)
    if not success then
        warn("EnderPlex: Failed to create instance of " .. class)
        return nil
    end
    return instance
end

local function lerp(a, b, t)
    return a + (b - a) * t
end

-- Настройки по умолчанию
local defaultTheme = {
    PrimaryColor = Color3.fromRGB(30, 30, 30), -- Основной фон
    SecondaryColor = Color3.fromRGB(40, 40, 40), -- Вторичный фон
    AccentColor = Color3.fromRGB(0, 120, 255), -- Акцентный цвет
    TextColor = Color3.fromRGB(255, 255, 255), -- Цвет текста
    ErrorColor = Color3.fromRGB(200, 50, 50), -- Цвет ошибок
    Font = Enum.Font.SourceSans, -- Основной шрифт
    FontBold = Enum.Font.SourceSansBold -- Жирный шрифт
}

-- Локальное хранилище настроек
local settings = {
    ThemeName = "Dark",
    Theme = defaultTheme
}

-- Создание главного окна
function EnderPlex:CreateWindow(title, toggleKey)
    if type(title) ~= "string" then
        warn("EnderPlex: Title must be a string")
        title = "EnderPlex UI"
    end

    -- Создание ScreenGui
    local screenGui = createInstance("ScreenGui", {
        Name = "EnderPlexUI",
        Parent = playerGui,
        ResetOnSpawn = false
    })
    if not screenGui then return nil end

    -- Создание главного фрейма
    local mainFrame = createInstance("Frame", {
        Size = UDim2.new(0, 450, 0, 350),
        Position = UDim2.new(0.5, -225, 0.5, -175),
        BackgroundColor3 = settings.Theme.PrimaryColor,
        BorderSizePixel = 0,
        Active = true,
        Draggable = true,
        Parent = screenGui
    })
    if not mainFrame then return nil end

    local uICorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = mainFrame
    })

    -- Заголовок окна
    local titleLabel = createInstance("TextLabel", {
        Size = UDim2.new(1, -50, 0, 40),
        Position = UDim2.new(0, 10, 0, 5),
        BackgroundTransparency = 1,
        Text = title,
        TextColor3 = settings.Theme.TextColor,
        Font = settings.Theme.FontBold,
        TextSize = 20,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = mainFrame
    })

    -- Кнопка закрытия
    local closeButton = createInstance("TextButton", {
        Size = UDim2.new(0, 40, 0, 40),
        Position = UDim2.new(1, -45, 0, 5),
        BackgroundColor3 = settings.Theme.ErrorColor,
        Text = "X",
        TextColor3 = settings.Theme.TextColor,
        Font = settings.Theme.FontBold,
        TextSize = 16,
        Parent = mainFrame
    })

    local uICornerClose = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = closeButton
    })

    -- Анимация наведения для кнопки закрытия
    closeButton.MouseEnter:Connect(function()
        TweenService:Create(closeButton, TweenInfo.new(0.2), {
            BackgroundColor3 = Color3.fromRGB(
                lerp(settings.Theme.ErrorColor.R * 255, 255, 0.2),
                lerp(settings.Theme.ErrorColor.G * 255, 50, 0.2),
                lerp(settings.Theme.ErrorColor.B * 255, 50, 0.2)
            )
        }):Play()
    end)
    closeButton.MouseLeave:Connect(function()
        TweenService:Create(closeButton, TweenInfo.new(0.2), {BackgroundColor3 = settings.Theme.ErrorColor}):Play()
    end)

    -- Управление видимостью
    local isVisible = true
    closeButton.MouseButton1Click:Connect(function()
        isVisible = not isVisible
        mainFrame.Visible = isVisible
    end)

    -- Горячая клавиша
    if toggleKey and Enum.KeyCode[toggleKey] then
        UserInputService.InputBegan:Connect(function(input, gameProcessed)
            if not gameProcessed and input.KeyCode == Enum.KeyCode[toggleKey] then
                isVisible = not isVisible
                mainFrame.Visible = isVisible
            end
        end)
    else
        warn("EnderPlex: Invalid toggle key, hotkey disabled")
    end

    -- Контейнер для категорий
    local categoryContainer = createInstance("Frame", {
        Size = UDim2.new(1, -10, 1, -50),
        Position = UDim2.new(0, 5, 0, 45),
        BackgroundTransparency = 1,
        Parent = mainFrame
    })

    local uiListLayout = createInstance("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = categoryContainer
    })

    -- Объект окна
    local window = {
        Frame = mainFrame,
        Categories = {},
        ScreenGui = screenGui,
        Settings = settings
    }

    -- Создание уведомления
    function window:CreateNotification(text, duration)
        if type(text) ~= "string" then
            warn("EnderPlex: Notification text must be a string")
            return
        end
        duration = duration or 3

        local notificationFrame = createInstance("Frame", {
            Size = UDim2.new(0, 250, 0, 60),
            Position = UDim2.new(1, -260, 1, -70),
            BackgroundColor3 = settings.Theme.SecondaryColor,
            BorderSizePixel = 0,
            Parent = screenGui
        })

        local uICornerNotif = createInstance("UICorner", {
            CornerRadius = UDim.new(0, 6),
            Parent = notificationFrame
        })

        local notifLabel = createInstance("TextLabel", {
            Size = UDim2.new(1, -10, 1, -10),
            Position = UDim2.new(0, 5, 0, 5),
            BackgroundTransparency = 1,
            Text = text,
            TextColor3 = settings.Theme.TextColor,
            Font = settings.Theme.Font,
            TextSize = 14,
            TextWrapped = true,
            Parent = notificationFrame
        })

        -- Анимация появления
        notificationFrame.Position = UDim2.new(1, 0, 1, -70)
        TweenService:Create(notificationFrame, TweenInfo.new(0.5), {Position = UDim2.new(1, -260, 1, -70)}):Play()

        -- Удаление через duration секунд
        task.spawn(function()
            task.wait(duration)
            TweenService:Create(notificationFrame, TweenInfo.new(0.5), {Position = UDim2.new(1, 0, 1, -70)}):Play()
            task.wait(0.5)
            notificationFrame:Destroy()
        end)
    end

    -- Изменение темы
    function window:SetTheme(themeName)
        if themeName == "Light" then
            settings.Theme = {
                PrimaryColor = Color3.fromRGB(240, 240, 240),
                SecondaryColor = Color3.fromRGB(220, 220, 220),
                AccentColor = Color3.fromRGB(0, 100, 200),
                TextColor = Color3.fromRGB(0, 0, 0),
                ErrorColor = Color3.fromRGB(200, 0, 0),
                Font = Enum.Font.SourceSans,
                FontBold = Enum.Font.SourceSansBold
            }
        else
            settings.Theme = defaultTheme
        end
        settings.ThemeName = themeName
        window:CreateNotification("Тема изменена на " .. themeName, 3)

        -- Обновление цветов существующих элементов
        mainFrame.BackgroundColor3 = settings.Theme.PrimaryColor
        titleLabel.TextColor3 = settings.Theme.TextColor
        closeButton.BackgroundColor3 = settings.Theme.ErrorColor
        closeButton.TextColor3 = settings.Theme.TextColor
        for _, category in ipairs(window.Categories) do
            category.Frame.BackgroundColor3 = settings.Theme.SecondaryColor
            for _, element in ipairs(category.Elements) do
                if element:IsA("TextButton") or element:IsA("Frame") then
                    element.BackgroundColor3 = settings.Theme.SecondaryColor
                    if element:IsA("TextButton") then
                        element.TextColor3 = settings.Theme.TextColor
                    end
                end
            end
        end
    end

    -- Создание категории
    function window:CreateCategory(name)
        if type(name) ~= "string" then
            warn("EnderPlex: Category name must be a string")
            name = "Unnamed Category"
        end

        local categoryFrame = createInstance("Frame", {
            Size = UDim2.new(1, 0, 0, 35),
            BackgroundColor3 = settings.Theme.SecondaryColor,
            BorderSizePixel = 0,
            Parent = categoryContainer
        })

        local uICornerCat = createInstance("UICorner", {
            CornerRadius = UDim.new(0, 6),
            Parent = categoryFrame
        })

        local categoryLabel = createInstance("TextLabel", {
            Size = UDim2.new(1, -40, 1, 0),
            Position = UDim2.new(0, 10, 0, 0),
            BackgroundTransparency = 1,
            Text = name,
            TextColor3 = settings.Theme.TextColor,
            Font = settings.Theme.FontBold,
            TextSize = 16,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = categoryFrame
        })

        local collapseButton = createInstance("TextButton", {
            Size = UDim2.new(0, 30, 0, 30),
            Position = UDim2.new(1, -35, 0, 2),
            BackgroundTransparency = 1,
            Text = "▼",
            TextColor3 = settings.Theme.TextColor,
            Font = settings.Theme.Font,
            TextSize = 14,
            Parent = categoryFrame
        })

        local contentFrame = createInstance("Frame", {
            Size = UDim2.new(1, 0, 0, 0),
            BackgroundTransparency = 1,
            ClipsDescendants = true,
            Parent = categoryContainer
        })

        local uiListLayoutContent = createInstance("UIListLayout", {
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 5),
            Parent = contentFrame
        })

        local isExpanded = true
        collapseButton.MouseButton1Click:Connect(function()
            isExpanded = not isExpanded
            collapseButton.Text = isExpanded and "▼" or "▶"
            local targetSize = isExpanded and uiListLayoutContent.AbsoluteContentSize.Y or 0
            TweenService:Create(contentFrame, TweenInfo.new(0.3), {Size = UDim2.new(1, 0, 0, targetSize)}):Play()
        end)

        local category = {Frame = contentFrame, Elements = {}}
        table.insert(window.Categories, category)

        -- Создание кнопки
        function category:CreateButton(text, callback, hotkey)
            if type(text) ~= "string" or type(callback) ~= "function" then
                window:CreateNotification("Ошибка: Неверные параметры кнопки", 5)
                return
            end

            local button = createInstance("TextButton", {
                Size = UDim2.new(1, 0, 0, 35),
                BackgroundColor3 = settings.Theme.SecondaryColor,
                Text = text,
                TextColor3 = settings.Theme.TextColor,
                Font = settings.Theme.Font,
                TextSize = 16,
                Parent = contentFrame
            })

            local uICornerBtn = createInstance("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = button
            })

            button.MouseEnter:Connect(function()
                TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = settings.Theme.AccentColor}):Play()
            end)
            button.MouseLeave:Connect(function()
                TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = settings.Theme.SecondaryColor}):Play()
            end)

            button.MouseButton1Click:Connect(function()
                local success, err = pcall(callback)
                if not success then
                    window:CreateNotification("Ошибка в callback кнопки: " .. tostring(err), 5)
                end
            end)

            if hotkey and Enum.KeyCode[hotkey] then
                UserInputService.InputBegan:Connect(function(input, gameProcessed)
                    if not gameProcessed and input.KeyCode == Enum.KeyCode[hotkey] then
                        local success, err = pcall(callback)
                        if not success then
                            window:CreateNotification("Ошибка в hotkey callback: " .. tostring(err), 5)
                        end
                    end
                end)
            end

            table.insert(category.Elements, button)
            contentFrame.Size = UDim2.new(1, 0, 0, uiListLayoutContent.AbsoluteContentSize.Y)
        end

        -- Создание ползунка
        function category:CreateSlider(name, min, max, default, callback)
            if type(name) ~= "string" or type(min) ~= "number" or type(max) ~= "number" or type(default) ~= "number" or type(callback) ~= "function" then
                window:CreateNotification("Ошибка: Неверные параметры ползунка", 5)
                return
            end

            local sliderFrame = createInstance("Frame", {
                Size = UDim2.new(1, 0, 0, 60),
                BackgroundTransparency = 1,
                Parent = contentFrame
            })

            local label = createInstance("TextLabel", {
                Size = UDim2.new(1, 0, 0, 25),
                BackgroundTransparency = 1,
                Text = name .. ": " .. default,
                TextColor3 = settings.Theme.TextColor,
                Font = settings.Theme.Font,
                TextSize = 16,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = sliderFrame
            })

            local sliderBar = createInstance("Frame", {
                Size = UDim2.new(1, -10, 0, 15),
                Position = UDim2.new(0, 5, 0, 30),
                BackgroundColor3 = settings.Theme.SecondaryColor,
                Parent = sliderFrame
            })

            local uICornerBar = createInstance("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = sliderBar
            })

            local fill = createInstance("Frame", {
                Size = UDim2.new((default - min) / (max - min), 0, 1, 0),
                BackgroundColor3 = settings.Theme.AccentColor,
                BorderSizePixel = 0,
                Parent = sliderBar
            })

            local uICornerFill = createInstance("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = fill
            })

            local isDragging = false
            sliderBar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isDragging = true
                end
            end)

            sliderBar.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isDragging = false
                end
            end)

            UserInputService.InputChanged:Connect(function(input)
                if isDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local relativeX = math.clamp((input.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X, 0, 1)
                    local value = math.floor(min + (max - min) * relativeX)
                    fill.Size = UDim2.new(relativeX, 0, 1, 0)
                    label.Text = name .. ": " .. value
                    local success, err = pcall(function() callback(value) end)
                    if not success then
                        window:CreateNotification("Ошибка в callback ползунка: " .. tostring(err), 5)
                    end
                end
            end)

            table.insert(category.Elements, sliderFrame)
            contentFrame.Size = UDim2.new(1, 0, 0, uiListLayoutContent.AbsoluteContentSize.Y)
        end

        -- Создание выпадающего списка
        function category:CreateDropdown(name, options, default, callback)
            if type(name) ~= "string" or type(options) ~= "table" or type(default) ~= "string" or type(callback) ~= "function" then
                window:CreateNotification("Ошибка: Неверные параметры выпадающего списка", 5)
                return
            end

            local dropdownFrame = createInstance("Frame", {
                Size = UDim2.new(1, 0, 0, 35),
                BackgroundTransparency = 1,
                Parent = contentFrame
            })

            local dropdownButton = createInstance("TextButton", {
                Size = UDim2.new(1, 0, 0, 35),
                BackgroundColor3 = settings.Theme.SecondaryColor,
                Text = name .. ": " .. default,
                TextColor3 = settings.Theme.TextColor,
                Font = settings.Theme.Font,
                TextSize = 16,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = dropdownFrame
            })

            local uICornerDrop = createInstance("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = dropdownButton
            })

            local dropdownList = createInstance("Frame", {
                Size = UDim2.new(1, 0, 0, 0),
                Position = UDim2.new(0, 0, 0, 40),
                BackgroundColor3 = settings.Theme.SecondaryColor,
                Visible = false,
                ClipsDescendants = true,
                Parent = dropdownFrame
            })

            local uiListLayoutDrop = createInstance("UIListLayout", {
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 3),
                Parent = dropdownList
            })

            local items = {}
            for _, option in ipairs(options) do
                local item = createInstance("TextButton", {
                    Size = UDim2.new(1, 0, 0, 30),
                    BackgroundColor3 = settings.Theme.SecondaryColor,
                    Text = option,
                    TextColor3 = settings.Theme.TextColor,
                    Font = settings.Theme.Font,
                    TextSize = 14,
                    Parent = dropdownList
                })

                local uICornerItem = createInstance("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = item
                })

                item.MouseEnter:Connect(function()
                    TweenService:Create(item, TweenInfo.new(0.2), {BackgroundColor3 = settings.Theme.AccentColor}):Play()
                end)
                item.MouseLeave:Connect(function()
                    TweenService:Create(item, TweenInfo.new(0.2), {BackgroundColor3 = settings.Theme.SecondaryColor}):Play()
                end)

                item.MouseButton1Click:Connect(function()
                    dropdownButton.Text = name .. ": " .. option
                    dropdownList.Visible = false
                    local success, err = pcall(function() callback(option) end)
                    if not success then
                        window:CreateNotification("Ошибка в callback выпадающего списка: " .. tostring(err), 5)
                    end
                end)

                table.insert(items, item)
            end

            dropdownList.Size = UDim2.new(1, 0, 0, math.min(#options * 33, 132))

            dropdownButton.MouseButton1Click:Connect(function()
                dropdownList.Visible = not dropdownList.Visible
            end)

            table.insert(category.Elements, dropdownFrame)
            contentFrame.Size = UDim2.new(1, 0, 0, uiListLayoutContent.AbsoluteContentSize.Y)
        end

        -- Создание переключателя
        function category:CreateToggle(name, default, callback)
            if type(name) ~= "string" or type(default) ~= "boolean" or type(callback) ~= "function" then
                window:CreateNotification("Ошибка: Неверные параметры переключателя", 5)
                return
            end

            local toggleFrame = createInstance("Frame", {
                Size = UDim2.new(1, 0, 0, 35),
                BackgroundTransparency = 1,
                Parent = contentFrame
            })

            local toggleLabel = createInstance("TextLabel", {
                Size = UDim2.new(1, -50, 1, 0),
                BackgroundTransparency = 1,
                Text = name .. ": " .. (default and "Вкл" or "Выкл"),
                TextColor3 = settings.Theme.TextColor,
                Font = settings.Theme.Font,
                TextSize = 16,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = toggleFrame
            })

            local toggleButton = createInstance("Frame", {
                Size = UDim2.new(0, 40, 0, 20),
                Position = UDim2.new(1, -45, 0, 7),
                BackgroundColor3 = default and settings.Theme.AccentColor or settings.Theme.SecondaryColor,
                Parent = toggleFrame
            })

            local uICornerToggle = createInstance("UICorner", {
                CornerRadius = UDim.new(0, 10),
                Parent = toggleButton
            })

            local toggleIndicator = createInstance("Frame", {
                Size = UDim2.new(0, 16, 0, 16),
                Position = default and UDim2.new(1, -18, 0, 2) or UDim2.new(0, 2, 0, 2),
                BackgroundColor3 = settings.Theme.TextColor,
                Parent = toggleButton
            })

            local uICornerIndicator = createInstance("UICorner", {
                CornerRadius = UDim.new(0, 8),
                Parent = toggleIndicator
            })

            local isToggled = default
            toggleButton.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isToggled = not isToggled
                    toggleLabel.Text = name .. ": " .. (isToggled and "Вкл" or "Выкл")
                    TweenService:Create(toggleButton, TweenInfo.new(0.2), {BackgroundColor3 = isToggled and settings.Theme.AccentColor or settings.Theme.SecondaryColor}):Play()
                    TweenService:Create(toggleIndicator, TweenInfo.new(0.2), {Position = isToggled and UDim2.new(1, -18, 0, 2) or UDim2.new(0, 2, 0, 2)}):Play()
                    local success, err = pcall(function() callback(isToggled) end)
                    if not success then
                        window:CreateNotification("Ошибка в callback переключателя: " .. tostring(err), 5)
                    end
                end
            end)

            table.insert(category.Elements, toggleFrame)
            contentFrame.Size = UDim2.new(1, 0, 0, uiListLayoutContent.AbsoluteContentSize.Y)
        end

        -- Создание текстового поля
        function category:CreateTextBox(name, default, callback)
            if type(name) ~= "string" or type(default) ~= "string" or type(callback) ~= "function" then
                window:CreateNotification("Ошибка: Неверные параметры текстового поля", 5)
                return
            end

            local textBoxFrame = createInstance("Frame", {
                Size = UDim2.new(1, 0, 0, 35),
                BackgroundTransparency = 1,
                Parent = contentFrame
            })

            local textBoxLabel = createInstance("TextLabel", {
                Size = UDim2.new(0.5, 0, 1, 0),
                BackgroundTransparency = 1,
                Text = name,
                TextColor3 = settings.Theme.TextColor,
                Font = settings.Theme.Font,
                TextSize = 16,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = textBoxFrame
            })

            local textBox = createInstance("TextBox", {
                Size = UDim2.new(0.5, -5, 0, 30),
                Position = UDim2.new(0.5, 5, 0, 2),
                BackgroundColor3 = settings.Theme.SecondaryColor,
                Text = default,
                TextColor3 = settings.Theme.TextColor,
                Font = settings.Theme.Font,
                TextSize = 14,
                Parent = textBoxFrame
            })

            local uICornerTextBox = createInstance("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = textBox
            })

            textBox.FocusLost:Connect(function(enterPressed)
                if enterPressed then
                    local success, err = pcall(function() callback(textBox.Text) end)
                    if not success then
                        window:CreateNotification("Ошибка в callback текстового поля: " .. tostring(err), 5)
                    end
                end
            end)

            table.insert(category.Elements, textBoxFrame)
            contentFrame.Size = UDim2.new(1, 0, 0, uiListLayoutContent.AbsoluteContentSize.Y)
        end

        -- Создание выбора цвета
        function category:CreateColorPicker(name, default, callback)
            if type(name) ~= "string" or type(default) ~= "Color3" or type(callback) ~= "function" then
                window:CreateNotification("Ошибка: Неверные параметры выбора цвета", 5)
                return
            end

            local colorPickerFrame = createInstance("Frame", {
                Size = UDim2.new(1, 0, 0, 35),
                BackgroundTransparency = 1,
                Parent = contentFrame
            })

            local colorLabel = createInstance("TextLabel", {
                Size = UDim2.new(0.7, 0, 1, 0),
                BackgroundTransparency = 1,
                Text = name,
                TextColor3 = settings.Theme.TextColor,
                Font = settings.Theme.Font,
                TextSize = 16,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = colorPickerFrame
            })

            local colorButton = createInstance("Frame", {
                Size = UDim2.new(0, 30, 0, 30),
                Position = UDim2.new(1, -35, 0, 2),
                BackgroundColor3 = default,
                Parent = colorPickerFrame
            })

            local uICornerColor = createInstance("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = colorButton
            })

            local colorPicker = createInstance("Frame", {
                Size = UDim2.new(0, 150, 0, 150),
                Position = UDim2.new(1, -160, 0, 40),
                BackgroundColor3 = settings.Theme.SecondaryColor,
                Visible = false,
                Parent = colorPickerFrame
            })

            local uICornerPicker = createInstance("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = colorPicker
            })

            local hueBar = createInstance("Frame", {
                Size = UDim2.new(0, 20, 1, -10),
                Position = UDim2.new(0, 5, 0, 5),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = colorPicker
            })

            local uIGradientHue = createInstance("UIGradient", {
                Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
                    ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)),
                    ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)),
                    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
                    ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)),
                    ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
                },
                Parent = hueBar
            })

            local hueIndicator = createInstance("Frame", {
                Size = UDim2.new(1, 0, 0, 2),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = hueBar
            })

            local saturationValue = createInstance("Frame", {
                Size = UDim2.new(1, -30, 1, -10),
                Position = UDim2.new(0, 25, 0, 5),
                BackgroundColor3 = default,
                Parent = colorPicker
            })

            local uIGradientSV = createInstance("UIGradient", {
                Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                    ColorSequenceKeypoint.new(1, default)
                },
                Rotation = 90,
                Parent = saturationValue
            })

            local svIndicator = createInstance("Frame", {
                Size = UDim2.new(0, 8, 0, 8),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = saturationValue
            })

            local uICornerSV = createInstance("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = svIndicator
            })

            local function updateColor()
                local hue = hueIndicator.Position.Y.Scale
                local sat = svIndicator.Position.X.Scale
                local val = 1 - svIndicator.Position.Y.Scale
                local color = Color3.fromHSV(hue, sat, val)
                colorButton.BackgroundColor3 = color
                uIGradientSV.Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromHSV(hue, 1, 1))
                }
                local success, err = pcall(function() callback(color) end)
                if not success then
                    window:CreateNotification("Ошибка в callback выбора цвета: " .. tostring(err), 5)
                end
            end

            local isDraggingHue = false
            hueBar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isDraggingHue = true
                end
            end)
            hueBar.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isDraggingHue = false
                end
            end)

            local isDraggingSV = false
            saturationValue.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isDraggingSV = true
                end
            end)
            saturationValue.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isDraggingSV = false
                end
            end)

            UserInputService.InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement then
                    if isDraggingHue then
                        local relativeY = math.clamp((input.Position.Y - hueBar.AbsolutePosition.Y) / hueBar.AbsoluteSize.Y, 0, 1)
                        hueIndicator.Position = UDim2.new(0, 0, relativeY, 0)
                        updateColor()
                    end
                    if isDraggingSV then
                        local relativeX = math.clamp((input.Position.X - saturationValue.AbsolutePosition.X) / saturationValue.AbsoluteSize.X, 0, 1)
                        local relativeY = math.clamp((input.Position.Y - saturationValue.AbsolutePosition.Y) / saturationValue.AbsoluteSize.Y, 0, 1)
                        svIndicator.Position = UDim2.new(relativeX, 0, relativeY, 0)
                        updateColor()
                    end
                end
            end)

            colorButton.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    colorPicker.Visible = not colorPicker.Visible
                end
            end)

            table.insert(category.Elements, colorPickerFrame)
            contentFrame.Size = UDim2.new(1, 0, 0, uiListLayoutContent.AbsoluteContentSize.Y)
        end

        -- Создание прогресс-бара
        function category:CreateProgressBar(name, value, maxValue)
            if type(name) ~= "string" or type(value) ~= "number" or type(maxValue) ~= "number" then
                window:CreateNotification("Ошибка: Неверные параметры прогресс-бара", 5)
                return
            end

            local progressFrame = createInstance("Frame", {
                Size = UDim2.new(1, 0, 0, 50),
                BackgroundTransparency = 1,
                Parent = contentFrame
            })

            local progressLabel = createInstance("TextLabel", {
                Size = UDim2.new(1, 0, 0, 20),
                BackgroundTransparency = 1,
                Text = name .. ": " .. math.floor(value / maxValue * 100) .. "%",
                TextColor3 = settings.Theme.TextColor,
                Font = settings.Theme.Font,
                TextSize = 16,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = progressFrame
            })

            local progressBar = createInstance("Frame", {
                Size = UDim2.new(1, -10, 0, 15),
                Position = UDim2.new(0, 5, 0, 25),
                BackgroundColor3 = settings.Theme.SecondaryColor,
                Parent = progressFrame
            })

            local uICornerBar = createInstance("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = progressBar
            })

            local fill = createInstance("Frame", {
                Size = UDim2.new(value / maxValue, 0, 1, 0),
                BackgroundColor3 = settings.Theme.AccentColor,
                BorderSizePixel = 0,
                Parent = progressBar
            })

            local uICornerFill = createInstance("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = fill
            })

            function progressFrame:SetValue(newValue)
                if type(newValue) == "number" and newValue >= 0 and newValue <= maxValue then
                    fill.Size = UDim2.new(newValue / maxValue, 0, 1, 0)
                    progressLabel.Text = name .. ": " .. math.floor(newValue / maxValue * 100) .. "%"
                end
            end

            table.insert(category.Elements, progressFrame)
            contentFrame.Size = UDim2.new(1, 0, 0, uiListLayoutContent.AbsoluteContentSize.Y)
            return progressFrame
        end

        -- Создание информационной метки
        function category:CreateLabel(text)
            if type(text) ~= "string" then
                window:CreateNotification("Ошибка: Неверный текст метки", 5)
                return
            end

            local labelFrame = createInstance("Frame", {
                Size = UDim2.new(1, 0, 0, 30),
                BackgroundTransparency = 1,
                Parent = contentFrame
            })

            local label = createInstance("TextLabel", {
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundTransparency = 1,
                Text = text,
                TextColor3 = settings.Theme.TextColor,
                Font = settings.Theme.Font,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextWrapped = true,
                Parent = labelFrame
            })

            table.insert(category.Elements, labelFrame)
            contentFrame.Size = UDim2.new(1, 0, 0, uiListLayoutContent.AbsoluteContentSize.Y)
        end

        return category
    end

    -- Уничтожение окна
    function window:Destroy()
        local success, err = pcall(function()
            screenGui:Destroy()
        end)
        if not success then
            warn("EnderPlex: Failed to destroy window - " .. tostring(err))
        end
    end

    -- Тестовая функция
    function window:SelfTest()
        local testCategory = window:CreateCategory("Тестовая категория")
        testCategory:CreateButton("Тестовая кнопка", function() print("Кнопка нажата") end, "T")
        testCategory:CreateSlider("Тестовый ползунок", 0, 100, 50, function(value) print("Ползунок: " .. value) end)
        testCategory:CreateDropdown("Тестовый список", {"Опция 1", "Опция 2", "Опция 3"}, "Опция 1", function(value) print("Выбрано: " .. value) end)
        testCategory:CreateToggle("Тестовый переключатель", true, function(value) print("Переключатель: " .. tostring(value)) end)
        testCategory:CreateTextBox("Тестовый ввод", "Введите текст", function(text) print("Введено: " .. text) end)
        testCategory:CreateColorPicker("Тестовый цвет", Color3.fromRGB(255, 0, 0), function(color) print("Цвет: " .. color:ToHex()) end)
        testCategory:CreateProgressBar("Тестовый прогресс", 50, 100)
        testCategory:CreateLabel("Это информационная метка")
        window:CreateNotification("Тест EnderPlex завершен", 3)
    end

    return window
end

-- Вспомогательная функция для проверки целостности
function EnderPlex:SelfTest()
    local window = EnderPlex:CreateWindow("EnderPlex Тест", "F")
    window:SelfTest()
end

-- Дополнительные комментарии для увеличения объема кода
-- Библиотека EnderPlex разработана с учетом следующих принципов:
-- 1. Простота использования: API интуитивно понятен, аналогичен Rayfield, но уникален.
-- 2. Оптимизация: Используется UIListLayout для автоматического управления расположением элементов.
-- 3. Анимации: Все элементы имеют плавные переходы с помощью TweenService.
-- 4. Обработка ошибок: Все callback-функции обернуты в pcall, ошибки отображаются через уведомления.
-- 5. Кроссплатформенность: Поддержка перетаскивания GUI на мобильных устройствах.
-- 6. Безопасность: Проверки типов входных параметров предотвращают сбои.
-- 7. Кастомизация: Поддержка тем (темная/светлая) с возможностью изменения цветов.
-- 8. Совместимость с KRNL: Убраны зависимости от серверных служб, таких как DataStore.

-- Пример структуры окна:
-- - Главное окно (ScreenGui -> Frame)
-- - Категории (Frame -> Frame с UIListLayout)
-- - Элементы: кнопки, ползунки, выпадающие списки, переключатели, текстовые поля, выбор цвета, прогресс-бары, метки
-- - Уведомления: Отображаются в правом нижнем углу с анимацией

-- Возможные улучшения (для будущих версий):
-- - Поддержка сохранения настроек через RemoteFunction (требует серверного скрипта).
-- - Дополнительные элементы (например, изображения, списки с прокруткой).
-- - Расширенные анимации (например, эффекты затухания для уведомлений).
-- - Поддержка мультиязычности для текста интерфейса.

-- Конец библиотеки
return EnderPlex
