```lua
-- EnderPlex.lua
-- Версия: 1.5 (Расширенная)
-- Библиотека для создания GUI в Roblox, совместима с KRNL
-- Добавлены новые функции, анимации, сохранение состояния, более 1500 строк

local EnderPlex = {}

-- Сервисы Roblox
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")

-- Игрок и GUI
local player = Players.LocalPlayer
local playerGui = player.PlayerGui

-- Утилиты
local function createInstance(class, props)
	local obj = Instance.new(class)
	for k, v in pairs(props) do
		if k ~= "Parent" then
			pcall(function() obj[k] = v end)
		end
	end
	if props.Parent then
		obj.Parent = props.Parent
	end
	return obj
end

local function lerp(a, b, t)
	return a + (b - a) * t
end

-- Тема по умолчанию
local defaultTheme = {
	PrimaryColor = Color3.fromRGB(28, 28, 28),
	SecondaryColor = Color3.fromRGB(35, 35, 35),
	AccentColor = Color3.fromRGB(65, 105, 225),
	TextColor = Color3.fromRGB(240, 240, 240),
	ErrorColor = Color3.fromRGB(220, 50, 50),
	ShadowColor = Color3.fromRGB(0, 0, 0),
	Font = Enum.Font.Gotham,
	FontBold = Enum.Font.GothamBold,
	BorderSizePixel = 0,
	CornerRadius = UDim.new(0, 8)
}

-- Неизменяемые настройки
local settings = {
	ThemeName = "Dark",
	Theme = defaultTheme,
	ToggleKey = Enum.KeyCode.RightShift,
	SaveState = true,
	SaveFile = "EnderPlexSettings.json"
}

-- Список уведомлений
local notifications = {}

-- Сохранение состояния
local function saveState(window)
	if not settings.SaveState then return end
	local state = {
		Position = {X = window.Frame.Position.X.Offset, Y = window.Frame.Position.Y.Offset},
		Theme = settings.ThemeName,
		ToggleKey = settings.ToggleKey.Name
	}
	local success, err = pcall(function()
		writefile(settings.SaveFile, HttpService:JSONEncode(state))
	end)
	if not success then
		warn("Ошибка сохранения состояния: " .. tostring(err))
	end
end

local function loadState(window)
	if not settings.SaveState or not pcall(function() readfile(settings.SaveFile) end) then return end
	local success, state = pcall(function()
		return HttpService:JSONDecode(readfile(settings.SaveFile))
	end)
	if success and state then
		if state.Position then
			TweenService:Create(window.Frame, TweenInfo.new(0.5, Enum.EasingStyle.Quart), {
				Position = UDim2.new(0.5, state.Position.X, 0.5, state.Position.Y)
			}):Play()
		end
		if state.Theme then
			window:SetTheme(state.Theme)
		end
		if state.ToggleKey then
			settings.ToggleKey = Enum.KeyCode[state.ToggleKey] or settings.ToggleKey
		end
	end
end

-- Главное окно
function EnderPlex:CreateWindow(title, toggleKey, customTheme)
	if type(title) ~= "string" then title = "EnderPlex" end
	if customTheme then
		local newTheme = {}
		for k, v in pairs(defaultTheme) do
			newTheme[k] = customTheme[k] or v
		end
		settings.Theme = newTheme
	end
	if toggleKey and Enum.KeyCode[toggleKey] then
		settings.ToggleKey = Enum.KeyCode[toggleKey]
	end

	-- ScreenGui
	local screenGui = createInstance("ScreenGui", {
		Name = "EnderPlexUI",
		Parent = playerGui,
		ResetOnSpawn = false,
		ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
		DisplayOrder = 100
	})

	-- Основной фрейм
	local mainFrame = createInstance("Frame", {
		Size = UDim2.new(0, 600, 0, 400),
		Position = UDim2.new(0.5, -300, 1, 100),
		BackgroundColor3 = settings.Theme.PrimaryColor,
		BorderSizePixel = settings.Theme.BorderSizePixel,
		Active = true,
		Draggable = true,
		Parent = screenGui,
		ZIndex = 1
	})

	createInstance("UICorner", {
		CornerRadius = settings.Theme.CornerRadius,
		Parent = mainFrame
	})

	-- Анимация появления
	TweenService:Create(mainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {
		Position = UDim2.new(0.5, -300, 0.5, -200)
	}):Play()

	-- Тень
	createInstance("ImageLabel", {
		Size = UDim2.new(1, 20, 1, 20),
		Position = UDim2.new(0, -10, 0, -10),
		BackgroundTransparency = 1,
		Image = "rbxassetid://1316045217",
		ImageColor3 = settings.Theme.ShadowColor,
		ImageTransparency = 0.6,
		ScaleType = Enum.ScaleType.Slice,
		SliceCenter = Rect.new(10, 10, 118, 118),
		Parent = mainFrame,
		ZIndex = 0
	})

	-- Заголовок
	local titleBar = createInstance("Frame", {
		Size = UDim2.new(1, 0, 0, 40),
		BackgroundColor3 = settings.Theme.SecondaryColor,
		BorderSizePixel = settings.Theme.BorderSizePixel,
		Parent = mainFrame,
		ZIndex = 2
	})

	createInstance("UICorner", {
		CornerRadius = settings.Theme.CornerRadius,
		Parent = titleBar
	})

	createInstance("TextLabel", {
		Size = UDim2.new(1, -100, 1, 0),
		Position = UDim2.new(0, 15, 0, 0),
		BackgroundTransparency = 1,
		Text = title,
		TextColor3 = settings.Theme.TextColor,
		Font = settings.Theme.FontBold,
		TextSize = 18,
		TextXAlignment = Enum.TextXAlignment.Left,
		Parent = titleBar,
		ZIndex = 3
	})

	-- Кнопка закрытия
	local closeButton = createInstance("TextButton", {
		Size = UDim2.new(0, 30, 0, 30),
		Position = UDim2.new(1, -35, 0, 5),
		BackgroundColor3 = settings.Theme.ErrorColor,
		Text = "✕",
		TextColor3 = settings.Theme.TextColor,
		Font = settings.Theme.Font,
		TextSize = 14,
		Parent = titleBar,
		ZIndex = 3
	})

	createInstance("UICorner", {
		CornerRadius = UDim.new(0, 6),
		Parent = closeButton
	})

	-- Кнопка настроек
	local settingsButton = createInstance("TextButton", {
		Size = UDim2.new(0, 30, 0, 30),
		Position = UDim2.new(1, -70, 0, 5),
		BackgroundColor3 = settings.Theme.SecondaryColor,
		Text = "⚙",
		TextColor3 = settings.Theme.TextColor,
		Font = settings.Theme.Font,
		TextSize = 14,
		Parent = titleBar,
		ZIndex = 3
	})

	createInstance("UICorner", {
		CornerRadius = UDim.new(0, 6),
		Parent = settingsButton
	})

	-- Анимация кнопок
	local function animateButton(button, isClose)
		button.MouseEnter:Connect(function()
			TweenService:Create(button, TweenInfo.new(0.2), {
				BackgroundColor3 = Color3.fromRGB(
					lerp(button.BackgroundColor3.R * 255, 255, 0.2),
					lerp(button.BackgroundColor3.G * 255, 100, 0.2),
					lerp(button.BackgroundColor3.B * 255, 100, 0.2)
				)
			}):Play()
		end)
		button.MouseLeave:Connect(function()
			TweenService:Create(button, TweenInfo.new(0.2), {
				BackgroundColor3 = isClose and settings.Theme.ErrorColor or settings.Theme.SecondaryColor
			}):Play()
		end)
	end

	animateButton(closeButton, true)
	animateButton(settingsButton, false)

	-- Фрейм настроек
	local settingsFrame = createInstance("Frame", {
		Size = UDim2.new(1, -20, 1, -60),
		Position = UDim2.new(0, 10, 0, 50),
		BackgroundColor3 = settings.Theme.SecondaryColor,
		BorderSizePixel = settings.Theme.BorderSizePixel,
		Parent = mainFrame,
		ZIndex = 5,
		Visible = false,
		BackgroundTransparency = 1
	})

	createInstance("UICorner", {
		CornerRadius = settings.Theme.CornerRadius,
		Parent = settingsFrame
	})

	createInstance("TextLabel", {
		Size = UDim2.new(1, -10, 0, 30),
		Position = UDim2.new(0, 5, 0, 5),
		BackgroundTransparency = 1,
		Text = "Настройки",
		TextColor3 = settings.Theme.TextColor,
		Font = settings.Theme.FontBold,
		TextSize = 16,
		Parent = settingsFrame,
		ZIndex = 6
	})

	local keybindLabel = createInstance("TextLabel", {
		Size = UDim2.new(0, 150, 0, 30),
		Position = UDim2.new(0, 5, 0, 40),
		BackgroundTransparency = 1,
		Text = "Горячая клавиша:",
		TextColor3 = settings.Theme.TextColor,
		Font = settings.Theme.Font,
		TextSize = 14,
		Parent = settingsFrame,
		ZIndex = 6
	})

	local keybindButton = createInstance("TextButton", {
		Size = UDim2.new(0, 100, 0, 30),
		Position = UDim2.new(0, 160, 0, 40),
		BackgroundColor3 = settings.Theme.SecondaryColor,
		Text = settings.ToggleKey.Name,
		TextColor3 = settings.Theme.TextColor,
		Font = settings.Theme.Font,
		TextSize = 14,
		Parent = settingsFrame,
		ZIndex = 6
	})

	createInstance("UICorner", {
		CornerRadius = UDim.new(0, 6),
		Parent = keybindButton
	})

	-- Логика видимости
	local isVisible = true
	local isSettingsOpen = false
	local tabContainer, tabMenu = nil, nil

	-- Предупреждение при закрытии
	local function showWarning(callback)
		local warningFrame = createInstance("Frame", {
			Size = UDim2.new(0, 300, 0, 150),
			Position = UDim2.new(0.5, -150, 0.5, -75),
			BackgroundColor3 = settings.Theme.PrimaryColor,
			BorderSizePixel = 0,
			Parent = screenGui,
			ZIndex = 100,
			BackgroundTransparency = 1
		})

		createInstance("UICorner", {
			CornerRadius = settings.Theme.CornerRadius,
			Parent = warningFrame
		})

		local warningLabel = createInstance("TextLabel", {
			Size = UDim2.new(1, -20, 0, 50),
			Position = UDim2.new(0, 10, 0, 10),
			BackgroundTransparency = 1,
			Text = "Вы уверены, что хотите закрыть GUI навсегда?",
			TextColor3 = settings.Theme.TextColor,
			Font = settings.Theme.Font,
			TextSize = 14,
			TextWrapped = true,
			Parent = warningFrame,
			ZIndex = 101
		})

		local confirmButton = createInstance("TextButton", {
			Size = UDim2.new(0, 100, 0, 30),
			Position = UDim2.new(0.5, -110, 1, -40),
			BackgroundColor3 = settings.Theme.AccentColor,
			Text = "Да",
			TextColor3 = settings.Theme.TextColor,
			Font = settings.Theme.Font,
			TextSize = 14,
			Parent = warningFrame,
			ZIndex = 101
		})

		local cancelButton = createInstance("TextButton", {
			Size = UDim2.new(0, 100, 0, 30),
			Position = UDim2.new(0.5, 10, 1, -40),
			BackgroundColor3 = settings.Theme.SecondaryColor,
			Text = "Нет",
			TextColor3 = settings.Theme.TextColor,
			Font = settings.Theme.Font,
			TextSize = 14,
			Parent = warningFrame,
			ZIndex = 101
		})

		createInstance("UICorner", {CornerRadius = UDim.new(0, 6), Parent = confirmButton})
		createInstance("UICorner", {CornerRadius = UDim.new(0, 6), Parent = cancelButton})

		TweenService:Create(warningFrame, TweenInfo.new(0.3), {BackgroundTransparency = 0}):Play()

		confirmButton.MouseButton1Click:Connect(function()
			TweenService:Create(warningFrame, TweenInfo.new(0.3), {BackgroundTransparency = 1}):Play()
			task.wait(0.3)
			warningFrame:Destroy()
			if callback then callback(true) end
		end)

		cancelButton.MouseButton1Click:Connect(function()
			TweenService:Create(warningFrame, TweenInfo.new(0.3), {BackgroundTransparency = 1}):Play()
			task.wait(0.3)
			warningFrame:Destroy()
			if callback then callback(false) end
		end)
	end

	closeButton.MouseButton1Click:Connect(function()
		showWarning(function(confirmed)
			if confirmed then
				TweenService:Create(mainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quart), {
					Position = UDim2.new(0.5, -300, 1, 100)
				}):Play()
				task.wait(0.5)
				screenGui:Destroy()
			end
		end)
	end)

	settingsButton.MouseButton1Click:Connect(function()
		isSettingsOpen = not isSettingsOpen
		TweenService:Create(settingsFrame, TweenInfo.new(0.3), {
			BackgroundTransparency = isSettingsOpen and 0 or 1,
			Visible = isSettingsOpen
		}):Play()
		if tabContainer then tabContainer.Visible = not isSettingsOpen end
		if tabMenu then tabMenu.Visible = not isSettingsOpen end
	end)

	-- Горячая клавиша
	local function bindToggleKey()
		UserInputService.InputBegan:Connect(function(input, processed)
			if not processed and input.KeyCode == settings.ToggleKey then
				isVisible = not isVisible
				TweenService:Create(mainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quart), {
					Position = isVisible and UDim2.new(0.5, -300, 0.5, -200) or UDim2.new(0.5, -300, 1, 100)
				}):Play()
			end
		end)
	end
	bindToggleKey()

	local waitingForKey = false
	keybindButton.MouseButton1Click:Connect(function()
		if waitingForKey then return end
		waitingForKey = true
		keybindButton.Text = "Нажмите клавишу..."
		local connection
		connection = UserInputService.InputBegan:Connect(function(input, processed)
			if not processed and input.UserInputType == Enum.UserInputType.Keyboard then
				local newKey = input.KeyCode
				if newKey ~= Enum.KeyCode.Unknown then
					settings.ToggleKey = newKey
					keybindButton.Text = newKey.Name
					saveState(window)
				else
					keybindButton.Text = settings.ToggleKey.Name
				end
				waitingForKey = false
				connection:Disconnect()
			end
		end)
	end)

	-- Боковое меню вкладок
	tabMenu = createInstance("Frame", {
		Size = UDim2.new(0, 150, 1, -40),
		Position = UDim2.new(0, 0, 0, 40),
		BackgroundColor3 = settings.Theme.SecondaryColor,
		BorderSizePixel = settings.Theme.BorderSizePixel,
		Parent = mainFrame,
		ZIndex = 2
	})

	createInstance("UIListLayout", {
		SortOrder = Enum.SortOrder.LayoutOrder,
		Padding = UDim.new(0, 5),
		Parent = tabMenu
	})

	-- Контейнер вкладок
	tabContainer = createInstance("Frame", {
		Size = UDim2.new(1, -150, 1, -40),
		Position = UDim2.new(0, 150, 0, 40),
		BackgroundTransparency = 1,
		Parent = mainFrame,
		ZIndex = 2
	})

	-- Окно
	local window = {
		Frame = mainFrame,
		ScreenGui = screenGui,
		Tabs = {},
		Settings = settings,
		TabContainer = tabContainer
	}

	-- Загрузка состояния
	loadState(window)

	-- Уведомление
	function window:CreateNotification(text, duration)
		if type(text) ~= "string" then return end
		duration = duration or 3

		local notifFrame = createInstance("Frame", {
			Size = UDim2.new(0, 250, 0, 60),
			Position = UDim2.new(1, 0, 1, -70 - (#notifications * 65)),
			BackgroundColor3 = settings.Theme.SecondaryColor,
			BorderSizePixel = settings.Theme.BorderSizePixel,
			Parent = screenGui,
			ZIndex = 10 + #notifications
		})

		createInstance("UICorner", {
			CornerRadius = UDim.new(0, 6),
			Parent = notifFrame
		})

		local notifLabel = createInstance("TextLabel", {
			Size = UDim2.new(1, -10, 1, -10),
			Position = UDim2.new(0, 5, 0, 5),
			BackgroundTransparency = 1,
			Text = text,
			TextColor3 = settings.Theme.TextColor,
			Font = settings.Theme.Font,
			TextSize = 14,
			TextWrapped = true,
			Parent = notifFrame,
			ZIndex = 11
		})

		table.insert(notifications, notifFrame)

		TweenService:Create(notifFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quart), {
			Position = UDim2.new(1, -260, 1, -70 - (#notifications * 65))
		}):Play()

		task.spawn(function()
			task.wait(duration)
			TweenService:Create(notifFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quart), {
				Position = UDim2.new(1, 0, 1, -70 - (#notifications * 65))
			}):Play()
			task.wait(0.5)
			for i, n in ipairs(notifications) do
				if n == notifFrame then
					table.remove(notifications, i)
					break
				end
			end
			notifFrame:Destroy()
			for i, n in ipairs(notifications) do
				TweenService:Create(n, TweenInfo.new(0.3), {
					Position = UDim2.new(1, -260, 1, -70 - (i * 65))
				}):Play()
			end
		end)
	end

	-- Смена темы
	function window:SetTheme(themeName)
		local newTheme = settings.Theme
		if themeName == "Light" then
			newTheme = {
				PrimaryColor = Color3.fromRGB(240, 240, 240),
				SecondaryColor = Color3.fromRGB(220, 220, 220),
				AccentColor = Color3.fromRGB(65, 105, 225),
				TextColor = Color3.fromRGB(30, 30, 30),
				ErrorColor = Color3.fromRGB(220, 50, 50),
				ShadowColor = Color3.fromRGB(100, 100, 100),
				Font = Enum.Font.Gotham,
				FontBold = Enum.Font.GothamBold,
				BorderSizePixel = 0,
				CornerRadius = UDim.new(0, 8)
			}
		end
		settings.Theme = newTheme
		settings.ThemeName = themeName
		saveState(window)

		-- Обновление цветов
		local function updateColors(obj)
			if obj:IsA("Frame") or obj:IsA("TextButton") then
				TweenService:Create(obj, TweenInfo.new(0.3), {
					BackgroundColor3 = obj == mainFrame and newTheme.PrimaryColor or
						(obj == closeButton and newTheme.ErrorColor or newTheme.SecondaryColor)
				}):Play()
			end
			if obj:IsA("TextLabel") or obj:IsA("TextButton") then
				TweenService:Create(obj, TweenInfo.new(0.3), {TextColor3 = newTheme.TextColor}):Play()
			end
			for _, child in ipairs(obj:GetChildren()) do
				updateColors(child)
			end
		end
		updateColors(mainFrame)
		updateColors(tabContainer)
		updateColors(tabMenu)
	end

	-- Создание вкладки
	function window:CreateTab(name)
		if type(name) ~= "string" then name = "Tab" end

		local tabButton = createInstance("TextButton", {
			Size = UDim2.new(1, -10, 0, 35),
			Position = UDim2.new(0, 5, 0, 0),
			BackgroundColor3 = settings.Theme.SecondaryColor,
			Text = name,
			TextColor3 = settings.Theme.TextColor,
			Font = settings.Theme.Font,
			TextSize = 14,
			Parent = tabMenu,
			ZIndex = 3
		})

		createInstance("UICorner", {
			CornerRadius = UDim.new(0, 6),
			Parent = tabButton
		})

		local tabContent = createInstance("ScrollingFrame", {
			Size = UDim2.new(1, -10, 1, -10),
			Position = UDim2.new(0, 5, 0, 5),
			BackgroundTransparency = 1,
			CanvasSize = UDim2.new(0, 0, 0, 0),
			ScrollBarThickness = 6,
			ScrollBarImageColor3 = settings.Theme.AccentColor,
			Visible = false,
			Parent = tabContainer,
			ZIndex = 2
		})

		local uiListLayout = createInstance("UIListLayout", {
			SortOrder = Enum.SortOrder.LayoutOrder,
			Padding = UDim.new(0, 8),
			Parent = tabContent
		})

		uiListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
			tabContent.CanvasSize = UDim2.new(0, 0, 0, uiListLayout.AbsoluteContentSize.Y)
		end)

		local tab = {Button = tabButton, Content = tabContent, Elements = {}}
		table.insert(window.Tabs, tab)

		tabButton.MouseButton1Click:Connect(function()
			for _, otherTab in ipairs(window.Tabs) do
				otherTab.Content.Visible = false
				TweenService:Create(otherTab.Button, TweenInfo.new(0.2), {
					BackgroundColor3 = settings.Theme.SecondaryColor
				}):Play()
			end
			tabContent.Visible = true
			TweenService:Create(tabButton, TweenInfo.new(0.2), {
				BackgroundColor3 = settings.Theme.AccentColor
			}):Play()
		end)

		animateButton(tabButton, false)

		if #window.Tabs == 1 then
			tabContent.Visible = true
			tabButton.BackgroundColor3 = settings.Theme.AccentColor
		end

		-- Элемент с анимацией
		local function animateElement(element)
			element.Position = UDim2.new(0, 5, 0, element.Position.Y.Offset + 20)
			element.BackgroundTransparency = 1
			TweenService:Create(element, TweenInfo.new(0.3, Enum.EasingStyle.Quart), {
				Position = UDim2.new(0, 5, 0, element.Position.Y.Offset),
				BackgroundTransparency = 0
			}):Play()
		end

		-- Кнопка
		function tab:CreateButton(text, callback, hotkey)
			if type(text) ~= "string" or type(callback) ~= "function" then return end

			local buttonFrame = createInstance("Frame", {
				Size = UDim2.new(1, 0, 0, 35),
				BackgroundTransparency = 1,
				Parent = tabContent,
				ZIndex = 3
			})

			local button = createInstance("TextButton", {
				Size = UDim2.new(1, -10, 1, 0),
				Position = UDim2.new(0, 5, 0, 0),
				BackgroundColor3 = settings.Theme.SecondaryColor,
				Text = text,
				TextColor3 = settings.Theme.TextColor,
				Font = settings.Theme.Font,
				TextSize = 14,
				Parent = buttonFrame,
				ZIndex = 4
			})

			createInstance("UICorner", {
				CornerRadius = UDim.new(0, 6),
				Parent = button
			})

			animateElement(buttonFrame)

			local ripple = createInstance("Frame", {
				Size = UDim2.new(0, 0, 0, 0),
				Position = UDim2.new(0.5, 0, 0.5, 0),
				BackgroundColor3 = settings.Theme.AccentColor,
				BackgroundTransparency = 0.7,
				AnchorPoint = Vector2.new(0.5, 0.5),
				ZIndex = 5,
				Visible = false,
				Parent = button
			})

			createInstance("UICorner", {
				CornerRadius = UDim.new(1, 0),
				Parent = ripple
			})

			button.MouseButton1Click:Connect(function()
				ripple.Visible = true
				TweenService:Create(ripple, TweenInfo.new(0.4), {
					Size = UDim2.new(2, 0, 2, 0),
					BackgroundTransparency = 1
				}):Play()
				task.wait(0.4)
				ripple.Visible = false
				ripple.Size = UDim2.new(0, 0, 0, 0)
				ripple.BackgroundTransparency = 0.7
				local success, err = pcall(callback)
				if not success then
					window:CreateNotification("Ошибка кнопки: " .. tostring(err), 5)
				end
			end)

			animateButton(button, false)

			if hotkey and Enum.KeyCode[hotkey] then
				UserInputService.InputBegan:Connect(function(input, processed)
					if not processed and input.KeyCode == Enum.KeyCode[hotkey] then
						local success, err = pcall(callback)
						if not success then
							window:CreateNotification("Ошибка горячей клавиши: " .. tostring(err), 5)
						end
					end
				end)
			end

			table.insert(tab.Elements, buttonFrame)
		end

		-- Ползунок
		function tab:CreateSlider(name, min, max, default, callback)
			if type(name) ~= "string" or type(min) ~= "number" or type(max) ~= "number" or type(default) ~= "number" or type(callback) ~= "function" then return end

			local sliderFrame = createInstance("Frame", {
				Size = UDim2.new(1, 0, 0, 60),
				BackgroundTransparency = 1,
				Parent = tabContent,
				ZIndex = 3
			})

			local label = createInstance("TextLabel", {
				Size = UDim2.new(1, -10, 0, 20),
				Position = UDim2.new(0, 5, 0, 0),
				BackgroundTransparency = 1,
				Text = name .. ": " .. default,
				TextColor3 = settings.Theme.TextColor,
				Font = settings.Theme.Font,
				TextSize = 14,
				TextXAlignment = Enum.TextXAlignment.Left,
				Parent = sliderFrame,
				ZIndex = 4
			})

			local sliderBar = createInstance("Frame", {
				Size = UDim2.new(1, -10, 0, 10),
				Position = UDim2.new(0, 5, 0, 30),
				BackgroundColor3 = settings.Theme.SecondaryColor,
				Parent = sliderFrame,
				ZIndex = 4
			})

			createInstance("UICorner", {
				CornerRadius = UDim.new(0, 5),
				Parent = sliderBar
			})

			local fill = createInstance("Frame", {
				Size = UDim2.new((default - min) / (max - min), 0, 1, 0),
				BackgroundColor3 = settings.Theme.AccentColor,
				BorderSizePixel = 0,
				Parent = sliderBar,
				ZIndex = 5
			})

			createInstance("UICorner", {
				CornerRadius = UDim.new(0, 5),
				Parent = fill
			})

			local knob = createInstance("Frame", {
				Size = UDim2.new(0, 16, 0, 16),
				Position = UDim2.new((default - min) / (max - min), -8, 0, -3),
				BackgroundColor3 = settings.Theme.TextColor,
				Parent = sliderBar,
				ZIndex = 6
			})

			createInstance("UICorner", {
				CornerRadius = UDim.new(0, 8),
				Parent = knob
			})

			animateElement(sliderFrame)

			local isDragging = false
			local lastUpdate = tick()
			sliderBar.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					isDragging = true
					mainFrame.Draggable = false
				end
			end)

			sliderBar.InputEnded:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					isDragging = false
					mainFrame.Draggable = true
				end
			end)

			UserInputService.InputChanged:Connect(function(input)
				if isDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
					if tick() - lastUpdate < 0.05 then return end
					local relativeX = math.clamp((input.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X, 0, 1)
					local value = math.floor(min + (max - min) * relativeX)
					TweenService:Create(fill, TweenInfo.new(0.2), {Size = UDim2.new(relativeX, 0, 1, 0)}):Play()
					TweenService:Create(knob, TweenInfo.new(0.2), {Position = UDim2.new(relativeX, -8, 0, -3)}):Play()
					label.Text = name .. ": " .. value
					local success, err = pcall(function() callback(value) end)
					if not success then window:CreateNotification("Ошибка ползунка: " .. tostring(err), 5) end
					lastUpdate = tick()
				end
			end)

			table.insert(tab.Elements, sliderFrame)
		end

		-- Выпадающий список
		function tab:CreateDropdown(name, options, default, callback)
			if type(name) ~= "string" or type(options) ~= "table" or type(default) ~= "string" or type(callback) ~= "function" then return end

			local dropdownFrame = createInstance("Frame", {
				Size = UDim2.new(1, 0, 0, 35),
				BackgroundTransparency = 1,
				Parent = tabContent,
				ZIndex = 3
			})

			local dropdownButton = createInstance("TextButton", {
				Size = UDim2.new(1, -10, 0, 30),
				Position = UDim2.new(0, 5, 0, 0),
				BackgroundColor3 = settings.Theme.SecondaryColor,
				Text = name .. ": " .. default,
				TextColor3 = settings.Theme.TextColor,
				Font = settings.Theme.Font,
				TextSize = 14,
				TextXAlignment = Enum.TextXAlignment.Left,
				Parent = dropdownFrame,
				ZIndex = 4
			})

			createInstance("UICorner", {
				CornerRadius = UDim.new(0, 6),
				Parent = dropdownButton
			})

			local dropdownList = createInstance("ScrollingFrame", {
				Size = UDim2.new(1, -10, 0, math.min(#options * 30, 120)),
				Position = UDim2.new(0, 5, 0, 35),
				BackgroundColor3 = settings.Theme.SecondaryColor,
				Visible = false,
				CanvasSize = UDim2.new(0, 0, 0, #options * 30),
				ScrollBarThickness = 4,
				ScrollBarImageColor3 = settings.Theme.AccentColor,
				Parent = tabContent,
				ZIndex = 10
			})

			createInstance("UICorner", {
				CornerRadius = UDim.new(0, 6),
				Parent = dropdownList
			})

			local uiListLayout = createInstance("UIListLayout", {
				SortOrder = Enum.SortOrder.LayoutOrder,
				Padding = UDim.new(0, 2),
				Parent = dropdownList
			})

			animateElement(dropdownFrame)

			for i, option in ipairs(options) do
				local item = createInstance("TextButton", {
					Size = UDim2.new(1, 0, 0, 28),
					BackgroundColor3 = settings.Theme.SecondaryColor,
					Text = option,
					TextColor3 = settings.Theme.TextColor,
					Font = settings.Theme.Font,
					TextSize = 14,
					Parent = dropdownList,
					ZIndex = 11
				})

				createInstance("UICorner", {
					CornerRadius = UDim.new(0, 4),
					Parent = item
				})

				animateButton(item, false)

				item.MouseButton1Click:Connect(function()
					dropdownButton.Text = name .. ": " .. option
					dropdownList.Visible = false
					TweenService:Create(dropdownList, TweenInfo.new(0.3), {BackgroundTransparency = 1}):Play()
					local success, err = pcall(function() callback(option) end)
					if not success then window:CreateNotification("Ошибка списка: " .. tostring(err), 5) end
				end)
			end

			dropdownButton.MouseButton1Click:Connect(function()
				dropdownList.Visible = not dropdownList.Visible
				TweenService:Create(dropdownList, TweenInfo.new(0.3), {
					BackgroundTransparency = dropdownList.Visible and 0 or 1
				}):Play()
			end)

			UserInputService.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 and dropdownList.Visible then
					local mousePos = input.Position
					local btnPos = dropdownButton.AbsolutePosition
					local btnSize = dropdownButton.AbsoluteSize
					local listPos = dropdownList.AbsolutePosition
					local listSize = dropdownList.AbsoluteSize
					local inButton = mousePos.X >= btnPos.X and mousePos.X <= btnPos.X + btnSize.X and
						mousePos.Y >= btnPos.Y and mousePos.Y <= btnPos.Y + btnSize.Y
					local inList = mousePos.X >= listPos.X and mousePos.X <= listPos.X + listSize.X and
						mousePos.Y >= listPos.Y and mousePos.Y <= listPos.Y + listSize.Y
					if not (inButton or inList) then
						dropdownList.Visible = false
						TweenService:Create(dropdownList, TweenInfo.new(0.3), {BackgroundTransparency = 1}):Play()
					end
				end
			end)

			table.insert(tab.Elements, dropdownFrame)
		end

		-- Переключатель
		function tab:CreateToggle(name, default, callback)
			if type(name) ~= "string" or type(default) ~= "boolean" or type(callback) ~= "function" then return end

			local toggleFrame = createInstance("Frame", {
				Size = UDim2.new(1, 0, 0, 35),
				BackgroundTransparency = 1,
				Parent = tabContent,
				ZIndex = 3
			})

			local toggleLabel = createInstance("TextLabel", {
				Size = UDim2.new(1, -60, 1, 0),
				Position = UDim2.new(0, 5, 0, 0),
				BackgroundTransparency = 1,
				Text = name .. ": " .. (default and "Вкл" or "Выкл"),
				TextColor3 = settings.Theme.TextColor,
				Font = settings.Theme.Font,
				TextSize = 14,
				TextXAlignment = Enum.TextXAlignment.Left,
				Parent = toggleFrame,
				ZIndex = 4
			})

			local toggleButton = createInstance("Frame", {
				Size = UDim2.new(0, 40, 0, 20),
				Position = UDim2.new(1, -45, 0, 7),
				BackgroundColor3 = settings.Theme.SecondaryColor,
				Parent = toggleFrame,
				ZIndex = 4
			})

			createInstance("UICorner", {
				CornerRadius = UDim.new(0, 10),
				Parent = toggleButton
			})

			local toggleIndicator = createInstance("Frame", {
				Size = UDim2.new(0, 16, 0, 16),
				Position = default and UDim2.new(1, -18, 0, 2) or UDim2.new(0, 2, 0, 2),
				BackgroundColor3 = default and settings.Theme.AccentColor or settings.Theme.TextColor,
				Parent = toggleButton,
				ZIndex = 5
			})

			createInstance("UICorner", {
				CornerRadius = UDim.new(0, 8),
				Parent = toggleIndicator
			})

			animateElement(toggleFrame)

			local isToggled = default
			toggleButton.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					isToggled = not isToggled
					toggleLabel.Text = name .. ": " .. (isToggled and "Вкл" or "Выкл")
					TweenService:Create(toggleIndicator, TweenInfo.new(0.2), {
						Position = isToggled and UDim2.new(1, -18, 0, 2) or UDim2.new(0, 2, 0, 2),
						BackgroundColor3 = isToggled and settings.Theme.AccentColor or settings.Theme.TextColor
					}):Play()
					local success, err = pcall(function() callback(isToggled) end)
					if not success then window:CreateNotification("Ошибка переключателя: " .. tostring(err), 5) end
				end
			end)

			table.insert(tab.Elements, toggleFrame)
		end

		-- Текстовое поле
		function tab:CreateTextBox(name, default, callback)
			if type(name) ~= "string" or type(default) ~= "string" or type(callback) ~= "function" then return end

			local textBoxFrame = createInstance("Frame", {
				Size = UDim2.new(1, 0, 0, 35),
				BackgroundTransparency = 1,
				Parent = tabContent,
				ZIndex = 3
			})

			local textBoxLabel = createInstance("TextLabel", {
				Size = UDim2.new(0.5, -5, 1, 0),
				Position = UDim2.new(0, 5, 0, 0),
				BackgroundTransparency = 1,
				Text = name,
				TextColor3 = settings.Theme.TextColor,
				Font = settings.Theme.Font,
				TextSize = 14,
				TextXAlignment = Enum.TextXAlignment.Left,
				Parent = textBoxFrame,
				ZIndex = 4
			})

			local textBox = createInstance("TextBox", {
				Size = UDim2.new(0.5, -5, 0, 30),
				Position = UDim2.new(0.5, 0, 0, 0),
				BackgroundColor3 = settings.Theme.SecondaryColor,
				Text = default,
				TextColor3 = settings.Theme.TextColor,
				Font = settings.Theme.Font,
				TextSize = 14,
				Parent = textBoxFrame,
				ZIndex = 4
			})

			createInstance("UICorner", {
				CornerRadius = UDim.new(0, 6),
				Parent = textBox
			})

			animateElement(textBoxFrame)

			textBox.FocusLost:Connect(function(enterPressed)
				if enterPressed then
					local success, err = pcall(function() callback(textBox.Text) end)
					if not success then window:CreateNotification("Ошибка текстового поля: " .. tostring(err), 5) end
				end
			end)

			table.insert(tab.Elements, textBoxFrame)
		end

		-- Многострочное текстовое поле
		function tab:CreateMultiLineTextBox(name, default, callback)
			if type(name) ~= "string" or type(default) ~= "string" or type(callback) ~= "function" then return end

			local textBoxFrame = createInstance("Frame", {
				Size = UDim2.new(1, 0, 0, 100),
				BackgroundTransparency = 1,
				Parent = tabContent,
				ZIndex = 3
			})

			local textBoxLabel = createInstance("TextLabel", {
				Size = UDim2.new(1, -10, 0, 20),
				Position = UDim2.new(0, 5, 0, 0),
				BackgroundTransparency = 1,
				Text = name,
				TextColor3 = settings.Theme.TextColor,
				Font = settings.Theme.Font,
				TextSize = 14,
				TextXAlignment = Enum.TextXAlignment.Left,
				Parent = textBoxFrame,
				ZIndex = 4
			})

			local textBox = createInstance("TextBox", {
				Size = UDim2.new(1, -10, 0, 70),
				Position = UDim2.new(0, 5, 0, 25),
				BackgroundColor3 = settings.Theme.SecondaryColor,
				Text = default,
				TextColor3 = settings.Theme.TextColor,
				Font = settings.Theme.Font,
				TextSize = 14,
				MultiLine = true,
				Parent = textBoxFrame,
				ZIndex = 4
			})

			createInstance("UICorner", {
				CornerRadius = UDim.new(0, 6),
				Parent = textBox
			})

			animateElement(textBoxFrame)

			textBox.FocusLost:Connect(function(enterPressed)
				if enterPressed then
					local success, err = pcall(function() callback(textBox.Text) end)
					if not success then window:CreateNotification("Ошибка многострочного поля: " .. tostring(err), 5) end
				end
			end)

			table.insert(tab.Elements, textBoxFrame)
		end

		-- Выпадающий список с поиском
		function tab:CreateSearchableDropdown(name, options, default, callback)
			if type(name) ~= "string" or type(options) ~= "table" or type(default) ~= "string" or type(callback) ~= "function" then return end

			local dropdownFrame = createInstance("Frame", {
				Size = UDim2.new(1, 0, 0, 65),
				BackgroundTransparency = 1,
				Parent = tabContent,
				ZIndex = 3
			})

			local searchBox = createInstance("TextBox", {
				Size = UDim2.new(1, -10, 0, 30),
				Position = UDim2.new(0, 5, 0, 0),
				BackgroundColor3 = settings.Theme.SecondaryColor,
				Text = "Поиск...",
				TextColor3 = settings.Theme.TextColor,
				Font = settings.Theme.Font,
				TextSize = 14,
				Parent = dropdownFrame,
				ZIndex = 4
			})

			createInstance("UICorner", {
				CornerRadius = UDim.new(0, 6),
				Parent = searchBox
			})

			local dropdownButton = createInstance("TextButton", {
				Size = UDim2.new(1, -10, 0, 30),
				Position = UDim2.new(0, 5, 0, 35),
				BackgroundColor3 = settings.Theme.SecondaryColor,
				Text = name .. ": " .. default,
				TextColor3 = settings.Theme.TextColor,
				Font = settings.Theme.Font,
				TextSize = 14,
				TextXAlignment = Enum.TextXAlignment.Left,
				Parent = dropdownFrame,
				ZIndex = 4
			})

			createInstance("UICorner", {
				CornerRadius = UDim.new(0, 6),
				Parent = dropdownButton
			})

			local dropdownList = createInstance("ScrollingFrame", {
				Size = UDim2.new(1, -10, 0, 120),
				Position = UDim2.new(0, 5, 0, 70),
				BackgroundColor3 = settings.Theme.SecondaryColor,
				Visible = false,
				CanvasSize = UDim2.new(0, 0, 0, #options * 30),
				ScrollBarThickness = 4,
				ScrollBarImageColor3 = settings.Theme.AccentColor,
				Parent = tabContent,
				ZIndex = 10
			})

			createInstance("UICorner", {
				CornerRadius = UDim.new(0, 6),
				Parent = dropdownList
			})

			local uiListLayout = createInstance("UIListLayout", {
				SortOrder = Enum.SortOrder.LayoutOrder,
				Padding = UDim.new(0, 2),
				Parent = dropdownList
			})

			animateElement(dropdownFrame)

			local function updateDropdown(searchText)
				for _, item in ipairs(dropdownList:GetChildren()) do
					if item:IsA("TextButton") then
						item:Destroy()
					end
				end
				local filtered = {}
				for _, option in ipairs(options) do
					if searchText == "" or string.find(string.lower(option), string.lower(searchText)) then
						table.insert(filtered, option)
					end
				end
				dropdownList.CanvasSize = UDim2.new(0, 0, 0, #filtered * 30)
				for i, option in ipairs(filtered) do
					local item = createInstance("TextButton", {
						Size = UDim2.new(1, 0, 0, 28),
						BackgroundColor3 = settings.Theme.SecondaryColor,
						Text = option,
						TextColor3 = settings.Theme.TextColor,
						Font = settings.Theme.Font,
						TextSize = 14,
						Parent = dropdownList,
						ZIndex = 11
					})
					createInstance("UICorner", {CornerRadius = UDim.new(0, 4), Parent = item})
					animateButton(item, false)
					item.MouseButton1Click:Connect(function()
						dropdownButton.Text = name .. ": " .. option
						dropdownList.Visible = false
						TweenService:Create(dropdownList, TweenInfo.new(0.3), {BackgroundTransparency = 1}):Play()
						local success, err = pcall(function() callback(option) end)
						if not success then window:CreateNotification("Ошибка списка: " .. tostring(err), 5) end
					end)
				end
			end

			searchBox:GetPropertyChangedSignal("Text"):Connect(function()
				updateDropdown(searchBox.Text)
			end)

			dropdownButton.MouseButton1Click:Connect(function()
				dropdownList.Visible = not dropdownList.Visible
				TweenService:Create(dropdownList, TweenInfo.new(0.3), {
					BackgroundTransparency = dropdownList.Visible and 0 or 1
				}):Play()
				updateDropdown(searchBox.Text)
			end)

			searchBox.Focused:Connect(function()
				if searchBox.Text == "Поиск..." then
					searchBox.Text = ""
				end
			end)

			searchBox.FocusLost:Connect(function()
				if searchBox.Text == "" then
					searchBox.Text = "Поиск..."
				end
			end)

			updateDropdown("")

			table.insert(tab.Elements, dropdownFrame)
		end

		-- Радиокнопки
		function tab:CreateRadioButton(name, options, default, callback)
			if type(name) ~= "string" or type(options) ~= "table" or type(default) ~= "string" or type(callback) ~= "function" then return end

			local radioFrame = createInstance("Frame", {
				Size = UDim2.new(1, 0, 0, #options * 30 + 30),
				BackgroundTransparency = 1,
				Parent = tabContent,
				ZIndex = 3
			})

			local radioLabel = createInstance("TextLabel", {
				Size = UDim2.new(1, -10, 0, 20),
				Position = UDim2.new(0, 5, 0, 0),
				BackgroundTransparency = 1,
				Text = name,
				TextColor3 = settings.Theme.TextColor,
				Font = settings.Theme.Font,
				TextSize = 14,
				TextXAlignment = Enum.TextXAlignment.Left,
				Parent = radioFrame,
				ZIndex = 4
			})

			local selected = default
			for i, option in ipairs(options) do
				local radioButton = createInstance("TextButton", {
					Size = UDim2.new(1, -10, 0, 25),
					Position = UDim2.new(0, 5, 0, 25 + (i-1) * 30),
					BackgroundColor3 = selected == option and settings.Theme.AccentColor or settings.Theme.SecondaryColor,
					Text = option,
					TextColor3 = settings.Theme.TextColor,
					Font = settings.Theme.Font,
					TextSize = 14,
					Parent = radioFrame,
					ZIndex = 4
				})

				createInstance("UICorner", {
					CornerRadius = UDim.new(0, 6),
					Parent = radioButton
				})

				animateButton(radioButton, false)

				radioButton.MouseButton1Click:Connect(function()
					selected = option
					for _, btn in ipairs(radioFrame:GetChildren()) do
						if btn:IsA("TextButton") then
							TweenService:Create(btn, TweenInfo.new(0.2), {
								BackgroundColor3 = btn.Text == selected and settings.Theme.AccentColor or settings.Theme.SecondaryColor
							}):Play()
						end
					end
					local success, err = pcall(function() callback(option) end)
					if not success then window:CreateNotification("Ошибка радиокнопки: " .. tostring(err), 5) end
				end)
			end

			animateElement(radioFrame)
			table.insert(tab.Elements, radioFrame)
		end

		-- Чекбоксы
		function tab:CreateCheckbox(name, default, callback)
			if type(name) ~= "string" or type(default) ~= "boolean" or type(callback) ~= "function" then return end

			local checkboxFrame = createInstance("Frame", {
				Size = UDim2.new(1, 0, 0, 35),
				BackgroundTransparency = 1,
				Parent = tabContent,
				ZIndex = 3
			})

			local checkboxLabel = createInstance("TextLabel", {
				Size = UDim2.new(1, -40, 1, 0),
				Position = UDim2.new(0, 5, 0, 0),
				BackgroundTransparency = 1,
				Text = name,
				TextColor3 = settings.Theme.TextColor,
				Font = settings.Theme.Font,
				TextSize = 14,
				TextXAlignment = Enum.TextXAlignment.Left,
				Parent = checkboxFrame,
				ZIndex = 4
			})

			local checkbox = createInstance("Frame", {
				Size = UDim2.new(0, 20, 0, 20),
				Position = UDim2.new(1, -30, 0, 7),
				BackgroundColor3 = default and settings.Theme.AccentColor or settings.Theme.SecondaryColor,
				Parent = checkboxFrame,
				ZIndex = 4
			})

			createInstance("UICorner", {
				CornerRadius = UDim.new(0, 4),
				Parent = checkbox
			})

			local checkMark = createInstance("TextLabel", {
				Size = UDim2.new(1, -4, 1, -4),
				Position = UDim2.new(0, 2, 0, 2),
				BackgroundTransparency = 1,
				Text = default and "✔" or "",
				TextColor3 = settings.Theme.TextColor,
				Font = settings.Theme.Font,
				TextSize = 14,
				Parent = checkbox,
				ZIndex = 5
			})

			animateElement(checkboxFrame)

			local isChecked = default
			checkbox.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					isChecked = not isChecked
					TweenService:Create(checkbox, TweenInfo.new(0.2), {
						BackgroundColor3 = isChecked and settings.Theme.AccentColor or settings.Theme.SecondaryColor
					}):Play()
					checkMark.Text = isChecked and "✔" or ""
					local success, err = pcall(function() callback(isChecked) end)
					if not success then window:CreateNotification("Ошибка чекбокса: " .. tostring(err), 5) end
				end
			end)

			table.insert(tab.Elements, checkboxFrame)
		end

		-- Цветовой выбор
		function tab:CreateColorPicker(name, default, callback)
			if type(name) ~= "string" or type(default) ~= "Color3" or type(callback) ~= "function" then return end

			local colorPickerFrame = createInstance("Frame", {
				Size = UDim2.new(1, 0, 0, 35),
				BackgroundTransparency = 1,
				Parent = tabContent,
				ZIndex = 3
			})

			local colorLabel = createInstance("TextLabel", {
				Size = UDim2.new(1, -40, 1, 0),
				Position = UDim2.new(0, 5, 0, 0),
				BackgroundTransparency = 1,
				Text = name,
				TextColor3 = settings.Theme.TextColor,
				Font = settings.Theme.Font,
				TextSize = 14,
				TextXAlignment = Enum.TextXAlignment.Left,
				Parent = colorPickerFrame,
				ZIndex = 4
			})

			local colorButton = createInstance("Frame", {
				Size = UDim2.new(0, 30, 0, 30),
				Position = UDim2.new(1, -35, 0, 2),
				BackgroundColor3 = default,
				Parent = colorPickerFrame,
				ZIndex = 4
			})

			createInstance("UICorner", {
				CornerRadius = UDim.new(0, 6),
				Parent = colorButton
			})

			local colorPicker = createInstance("Frame", {
				Size = UDim2.new(0, 150, 0, 150),
				Position = UDim2.new(1, -155, 0, 35),
				BackgroundColor3 = settings.Theme.SecondaryColor,
				Visible = false,
				Parent = tabContent,
				ZIndex = 10
			})

			createInstance("UICorner", {
				CornerRadius = UDim.new(0, 6),
				Parent = colorPicker
			})

			local hueBar = createInstance("Frame", {
				Size = UDim2.new(0, 20, 1, -10),
				Position = UDim2.new(0, 5, 0, 5),
				BackgroundColor3 = Color3.fromRGB(255, 255, 255),
				Parent = colorPicker,
				ZIndex = 11
			})

			createInstance("UIGradient", {
				Color = ColorSequence.new{
					ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
					ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)),
					ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)),
					ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
					ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)),
					ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)),
					ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
				},
				Parent = hueBar
			})

			local hueIndicator = createInstance("Frame", {
				Size = UDim2.new(1, 0, 0, 2),
				BackgroundColor3 = Color3.fromRGB(255, 255, 255),
				Parent = hueBar,
				ZIndex = 12
			})

			local saturationValue = createInstance("Frame", {
				Size = UDim2.new(1, -30, 1, -10),
				Position = UDim2.new(0, 25, 0, 5),
				BackgroundColor3 = default,
				Parent = colorPicker,
				ZIndex = 11
			})

			createInstance("UIGradient", {
				Color = ColorSequence.new{
					ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
					ColorSequenceKeypoint.new(1, default)
				},
				Rotation = 90,
				Parent = saturationValue
			})

			local svIndicator = createInstance("Frame", {
				Size = UDim2.new(0, 8, 0, 8),
				BackgroundColor3 = Color3.fromRGB(255, 255, 255),
				Parent = saturationValue,
				ZIndex = 12
			})

			createInstance("UICorner", {
				CornerRadius = UDim.new(0, 4),
				Parent = svIndicator
			})

			animateElement(colorPickerFrame)

			local function updateColor()
				local hue = hueIndicator.Position.Y.Scale
				local sat = svIndicator.Position.X.Scale
				local val = 1 - svIndicator.Position.Y.Scale
				local color = Color3.fromHSV(hue, sat, val)
				TweenService:Create(colorButton, TweenInfo.new(0.2), {BackgroundColor3 = color}):Play()
				local success, err = pcall(function() callback(color) end)
				if not success then window:CreateNotification("Ошибка выбора цвета: " .. tostring(err), 5) end
			end

			local isDraggingHue = false
			hueBar.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					isDraggingHue = true
					mainFrame.Draggable = false
				end
			end)
			hueBar.InputEnded:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					isDraggingHue = false
					mainFrame.Draggable = true
				end
			end)

			local isDraggingSV = false
			saturationValue.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					isDraggingSV = true
					mainFrame.Draggable = false
				end
			end)
			saturationValue.InputEnded:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					isDraggingSV = false
					mainFrame.Draggable = true
				end
			end)

			UserInputService.InputChanged:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseMovement then
					if isDraggingHue then
						local relativeY = math.clamp((input.Position.Y - hueBar.AbsolutePosition.Y) / hueBar.AbsoluteSize.Y, 0, 1)
						TweenService:Create(hueIndicator, TweenInfo.new(0.1), {Position = UDim2.new(0, 0, relativeY, 0)}):Play()
						updateColor()
					end
					if isDraggingSV then
						local relativeX = math.clamp((input.Position.X - saturationValue.AbsolutePosition.X) / saturationValue.AbsoluteSize.X, 0, 1)
						local relativeY = math.clamp((input.Position.Y - saturationValue.AbsolutePosition.Y) / saturationValue.AbsoluteSize.Y, 0, 1)
						TweenService:Create(svIndicator, TweenInfo.new(0.1), {Position = UDim2.new(relativeX, 0, relativeY, 0)}):Play()
						updateColor()
					end
				end
			end)

			colorButton.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					colorPicker.Visible = not colorPicker.Visible
					TweenService:Create(colorPicker, TweenInfo.new(0.3), {BackgroundTransparency = colorPicker.Visible and 0 or 1}):Play()
				end
			end)

			table.insert(tab.Elements, colorPickerFrame)
		end

		-- Метка
		function tab:CreateLabel(text)
			if type(text) ~= "string" then return end

			local labelFrame = createInstance("Frame", {
				Size = UDim2.new(1, 0, 0, 30),
				BackgroundTransparency = 1,
				Parent = tabContent,
				ZIndex = 3
			})

			local label = createInstance("TextLabel", {
				Size = UDim2.new(1, -10, 1, 0),
				Position = UDim2.new(0, 5, 0, 0),
				BackgroundTransparency = 1,
				Text = text,
				TextColor3 = settings.Theme.TextColor,
				Font = settings.Theme.Font,
				TextSize = 14,
				TextXAlignment = Enum.TextXAlignment.Left,
				TextWrapped = true,
				Parent = labelFrame,
				ZIndex = 4
			})

			animateElement(labelFrame)
			table.insert(tab.Elements, labelFrame)
		end

		return tab
	end

	-- Уничтожение
	function window:Destroy()
		TweenService:Create(mainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quart), {
			Position = UDim2.new(0.5, -300, 1, 100)
		}):Play()
		task.wait(0.5)
		local success, err = pcall(function() screenGui:Destroy() end)
		if not success then warn("Ошибка уничтожения: " .. tostring(err)) end
	end

	-- Тест
	function window:SelfTest()
		local testTab = window:CreateTab("Тест")
		testTab:CreateButton("Тест кнопки", function() print("Кнопка нажата") end, "T")
		testTab:CreateSlider("Тест ползунка", 0, 100, 50, function(v) print("Ползунок: " .. v) end)
		testTab:CreateDropdown("Тест списка", {"Опция 1", "Опция 2", "Опция 3"}, "Опция 1", function(v) print("Список: " .. v) end)
		testTab:CreateToggle("Тест переключателя", true, function(v) print("Переключатель: " .. v) end)
		testTab:CreateTextBox("Тест текста", "Ввод", function(t) print("Текст: " .. t) end)
		testTab:CreateMultiLineTextBox("Многострочный текст", "Введите текст\nНесколько строк", function(t) print("Многострочный: " .. t) end)
		testTab:CreateSearchableDropdown("Поиск списка", {"Яблоко", "Банан", "Вишня", "Груша", "Слива"}, "Яблоко", function(v) print("Поиск: " .. v) end)
		testTab:CreateRadioButton("Радио", {"Вариант 1", "Вариант 2", "Вариант 3"}, "В
