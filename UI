-- EnderPlex.lua
-- Версия: 1.5
-- Библиотека для GUI в Roblox, работает с KRNL
-- Все баги исправлены, добавлены настройки, новые элементы и система биндов

local EnderPlex = {}

-- Сервисы Roblox
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")

-- Игрок и GUI
local player = Players.LocalPlayer
local playerGui = player.PlayerGui

-- Создание объектов
local function createInstance(class, props)
    local obj = Instance.new(class)
    for k, v in pairs(props) do
        obj[k] = v
    end
    return obj
end

-- Линейная интерполяция
local function lerp(a, b, t)
    return a + (b - a) * t
end

-- Тема по умолчанию
local defaultTheme = {
    PrimaryColor = Color3.fromRGB(28, 28, 28),
    SecondaryColor = Color3.fromRGB(35, 35, 35),
    AccentColor = Color3.fromRGB(65, 105, 225),
    TextColor = Color3.fromRGB(240, 240, 240),
    ErrorColor = Color3.fromRGB(220, 50, 50),
    SuccessColor = Color3.fromRGB(50, 220, 50),
    InfoColor = Color3.fromRGB(255, 165, 0),
    ShadowColor = Color3.fromRGB(0, 0, 0),
    Font = Enum.Font.Gotham,
    FontBold = Enum.Font.GothamBold
}

-- Настройки (неизменяемые извне)
local settings = {
    ThemeName = "Dark",
    Theme = defaultTheme,
    ToggleKey = Enum.KeyCode.RightShift,
    SaveState = false
}

-- Список биндов
local binds = {}

-- Система уведомлений
local Notification = {}

function Notification.new(type, heading, body, autoRemove, autoRemoveTime, onClose)
    local notificationGui = createInstance("ScreenGui", {
        Name = "EnderPlexNotification",
        Parent = playerGui,
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })

    local notificationFrame = createInstance("Frame", {
        Size = UDim2.new(0, 300, 0, 100),
        Position = UDim2.new(1, 10, 0, 10),
        BackgroundColor3 = settings.Theme.PrimaryColor,
        BorderSizePixel = 0,
        Parent = notificationGui,
        ZIndex = 100,
        BackgroundTransparency = 1
    })

    local uICorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = notificationFrame
    })

    local shadow = createInstance("ImageLabel", {
        Size = UDim2.new(1, 20, 1, 20),
        Position = UDim2.new(0, -10, 0, -10),
        BackgroundTransparency = 1,
        Image = "rbxassetid://1316045217",
        ImageColor3 = settings.Theme.ShadowColor,
        ImageTransparency = 0.6,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(10, 10, 118, 118),
        Parent = notificationFrame,
        ZIndex = 99
    })

    local iconLabel = createInstance("TextLabel", {
        Size = UDim2.new(0, 40, 0, 40),
        Position = UDim2.new(0, 10, 0, 10),
        BackgroundTransparency = 1,
        Text = type == "success" and "✔" or type == "error" and "✖" or "ℹ",
        TextColor3 = type == "success" and settings.Theme.SuccessColor or
                     type == "error" and settings.Theme.ErrorColor or
                     settings.Theme.InfoColor,
        Font = settings.Theme.FontBold,
        TextSize = 24,
        TextXAlignment = Enum.TextXAlignment.Center,
        Parent = notificationFrame,
        ZIndex = 101
    })

    local headingLabel = createInstance("TextLabel", {
        Size = UDim2.new(1, -60, 0, 30),
        Position = UDim2.new(0, 50, 0, 10),
        BackgroundTransparency = 1,
        Text = heading,
        TextColor3 = settings.Theme.TextColor,
        Font = settings.Theme.FontBold,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextWrapped = true,
        Parent = notificationFrame,
        ZIndex = 101
    })

    local bodyLabel = createInstance("TextLabel", {
        Size = UDim2.new(1, -60, 0, 50),
        Position = UDim2.new(0, 50, 0, 40),
        BackgroundTransparency = 1,
        Text = body,
        TextColor3 = settings.Theme.TextColor,
        Font = settings.Theme.Font,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextWrapped = true,
        Parent = notificationFrame,
        ZIndex = 101
    })

    local closeButton = createInstance("TextButton", {
        Size = UDim2.new(0, 24, 0, 24),
        Position = UDim2.new(1, -30, 0, 5),
        BackgroundColor3 = settings.Theme.ErrorColor,
        Text = "✕",
        TextColor3 = settings.Theme.TextColor,
        Font = settings.Theme.Font,
        TextSize = 14,
        Parent = notificationFrame,
        ZIndex = 101,
        BackgroundTransparency = 1
    })

    local uICornerClose = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = closeButton
    })

    -- Анимация появления
    TweenService:Create(notificationFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {
        Position = UDim2.new(1, -310, 0, 10),
        BackgroundTransparency = 0
    }):Play()
    TweenService:Create(shadow, TweenInfo.new(0.5), {ImageTransparency = 0.4}):Play()
    TweenService:Create(closeButton, TweenInfo.new(0.5), {BackgroundTransparency = 0}):Play()

    -- Эффект при наведении на кнопку закрытия
    closeButton.MouseEnter:Connect(function()
        TweenService:Create(closeButton, TweenInfo.new(0.2), {
            BackgroundColor3 = Color3.fromRGB(
                lerp(closeButton.BackgroundColor3.R * 255, 255, 0.2),
                lerp(closeButton.BackgroundColor3.G * 255, 100, 0.2),
                lerp(closeButton.BackgroundColor3.B * 255, 100, 0.2)
            )
        }):Play()
    end)
    closeButton.MouseLeave:Connect(function()
        TweenService:Create(closeButton, TweenInfo.new(0.2), {
            BackgroundColor3 = settings.Theme.ErrorColor
        }):Play()
    end)

    -- Обработка закрытия
    local function closeNotification()
        TweenService:Create(notificationFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quart), {
            Position = UDim2.new(1, 10, 0, 10),
            BackgroundTransparency = 1
        }):Play()
        TweenService:Create(shadow, TweenInfo.new(0.5), {ImageTransparency = 1}):Play()
        TweenService:Create(closeButton, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
        task.wait(0.5)
        notificationGui:Destroy()
        if onClose then
            pcall(onClose)
        end
    end

    closeButton.MouseButton1Click:Connect(closeNotification)

    -- Автоматическое удаление
    if autoRemove and autoRemoveTime then
        task.spawn(function()
            task.wait(autoRemoveTime)
            if notificationGui.Parent then
                closeNotification()
            end
        end)
    end

    return notificationGui
end

-- Главное окно
function EnderPlex:CreateWindow(title, toggleKey, customTheme)
    if type(title) ~= "string" then title = "EnderPlex" end
    if customTheme then settings.Theme = customTheme end
    if toggleKey then settings.ToggleKey = Enum.KeyCode[toggleKey] end

    local screenGui = createInstance("ScreenGui", {
        Name = "EnderPlexUI",
        Parent = playerGui,
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })

    local mainFrame = createInstance("Frame", {
        Size = UDim2.new(0, 600, 0, 400),
        Position = UDim2.new(0.5, -300, 1, 100),
        BackgroundColor3 = settings.Theme.PrimaryColor,
        BorderSizePixel = 0,
        Active = true,
        Draggable = true,
        Parent = screenGui,
        ZIndex = 1,
        BackgroundTransparency = 1
    })

    TweenService:Create(mainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {
        Position = UDim2.new(0.5, -300, 0.5, -200),
        BackgroundTransparency =  đón

    local uICorner = createInstance("UICorner", {CornerRadius = UDim.new(0, 8), Parent = mainFrame})

    local shadow = createInstance("ImageLabel", {
        Size = UDim2.new(1, 20, 1, 20),
        Position = UDim2.new(0, -10, 0, -10),
        BackgroundTransparency = 1,
        Image = "rbxassetid://1316045217",
        ImageColor3 = settings.Theme.ShadowColor,
        ImageTransparency = 0.6,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(10, 10, 118, 118),
        Parent = mainFrame,
        ZIndex = 0
    })

    TweenService:Create(shadow, TweenInfo.new(0.5), {BackgroundTransparency = 0}):Play()

    local titleBar = createInstance("Frame", {
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundColor3 = settings.Theme.SecondaryColor,
        BorderSizePixel = 0,
        Parent = mainFrame,
        ZIndex = 2
    })

    local uICornerTitle = createInstance("UICorner", {CornerRadius = UDim.new(0, 8), Parent = titleBar})

    local titleLabel = createInstance("TextLabel", {
        Size = UDim2.new(1, -100, 1, 0),
        Position = UDim2.new(0, 15, 0, 0),
        BackgroundTransparency = 1,
        Text = title,
        TextColor3 = settings.Theme.TextColor,
        Font = settings.Theme.FontBold,
        TextSize = 18,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = titleBar,
        ZIndex = 3
    })

    local closeButton = createInstance("TextButton", {
        Size = UDim2.new(0, 30, 0, 30),
        Position = UDim2.new(1, -35, 0, 5),
        BackgroundColor3 = settings.Theme.ErrorColor,
        Text = "✕",
        TextColor3 = settings.Theme.TextColor,
        Font = settings.Theme.Font,
        TextSize = 14,
        Parent = titleBar,
        ZIndex = 3
    })

    local uICornerClose = createInstance("UICorner", {CornerRadius = UDim.new(0, 6), Parent = closeButton})

    local settingsButton = createInstance("TextButton", {
        Size = UDim2.new(0, 30, 0, 30),
        Position = UDim2.new(1, -70, 0, 5),
        BackgroundColor3 = settings.Theme.SecondaryColor,
        Text = "⚙",
        TextColor3 = settings.Theme.TextColor,
        Font = settings.Theme.Font,
        TextSize = 14,
        Parent = titleBar,
        ZIndex = 3
    })

    local uICornerSettings = createInstance("UICorner", {CornerRadius = UDim.new(0, 6), Parent = settingsButton})

    for _, btn in ipairs({closeButton, settingsButton}) do
        btn.MouseEnter:Connect(function()
            TweenService:Create(btn, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(
                lerp(btn.BackgroundColor3.R * 255, 255, 0.2),
                lerp(btn.BackgroundColor3.G * 255, 100, 0.2),
                lerp(btn.BackgroundColor3.B * 255, 100, 0.2)
            )}):Play()
        end)
        btn.MouseLeave:Connect(function()
            TweenService:Create(btn, TweenInfo.new(0.2), {BackgroundColor3 = btn == closeButton and settings.Theme.ErrorColor or settings.Theme.SecondaryColor}):Play()
        end)
    end

    local settingsFrame = createInstance("Frame", {
        Size = UDim2.new(1, -20, 1, -60),
        Position = UDim2.new(0, 10, 0, 50),
        BackgroundColor3 = settings.Theme.SecondaryColor,
        BorderSizePixel = 0,
        Parent = mainFrame,
        ZIndex = 5,
        Visible = false,
        BackgroundTransparency = 1
    })

    local uICornerSettingsFrame = createInstance("UICorner", {CornerRadius = UDim.new(0, 6), Parent = settingsFrame})

    local settingsLabel = createInstance("TextLabel", {
        Size = UDim2.new(1, -10, 0, 30),
        Position = UDim2.new(0, 5, 0, 5),
        BackgroundTransparency = 1,
        Text = "Настройки",
        TextColor3 = settings.Theme.TextColor,
        Font = settings.Theme.FontBold,
        TextSize = 16,
        Parent = settingsFrame,
        ZIndex = 6
    })

    local keybindLabel = createInstance("TextLabel", {
        Size = UDim2.new(0, 150, 0, 30),
        Position = UDim2.new(0, 5, 0, 40),
        BackgroundTransparency = 1,
        Text = "Горячая клавиша:",
        TextColor3 = settings.Theme.TextColor,
        Font = settings.Theme.Font,
        TextSize = 14,
        Parent = settingsFrame,
        ZIndex = 6
    })

    local keybindButton = createInstance("TextButton", {
        Size = UDim2.new(0, 100, 0, 30),
        Position = UDim2.new(0, 160, 0, 40),
        BackgroundColor3 = settings.Theme.SecondaryColor,
        Text = settings.ToggleKey.Name,
        TextColor3 = settings.Theme.TextColor,
        Font = settings.Theme.Font,
        TextSize = 14,
        Parent = settingsFrame,
        ZIndex = 6
    })

    local uICornerKeybind = createInstance("UICorner", {CornerRadius = UDim.new(0, 6), Parent = keybindButton})

    local saveStateToggleFrame = createInstance("Frame", {
        Size = UDim2.new(1, 0, 0, 35),
        BackgroundTransparency = 1,
        Parent = settingsFrame,
        ZIndex = 6,
        Position = UDim2.new(0, 5, 0, 80)
    })

    local saveStateLabel = createInstance("TextLabel", {
        Size = UDim2.new(1, -60, 1, 0),
        Position = UDim2.new(0, 5, 0, 0),
        BackgroundTransparency = 1,
        Text = "Сохранять состояние",
        TextColor3 = settings.Theme.TextColor,
        Font = settings.Theme.Font,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = saveStateToggleFrame,
        ZIndex = 7
    })

    local saveStateButton = createInstance("Frame", {
        Size = UDim2.new(0, 40, 0, 20),
        Position = UDim2.new(1, -45, 0, 7),
        BackgroundColor3 = settings.Theme.SecondaryColor,
        Parent = saveStateToggleFrame,
        ZIndex = 7
    })

    local uICornerSaveState = createInstance("UICorner", {CornerRadius = UDim.new(0, 10), Parent = saveStateButton})

    local saveStateIndicator = createInstance("Frame", {
        Size = UDim2.new(0, 16, 0, 16),
        Position = UDim2.new(0, 2, 0, 2),
        BackgroundColor3 = settings.Theme.TextColor,
        Parent = saveStateButton,
        ZIndex = 8
    })

    local uICornerSaveStateIndicator = createInstance("UICorner", {CornerRadius = UDim.new(0, 8), Parent = saveStateIndicator})

    local isSaveState = settings.SaveState
    saveStateButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isSaveState = not isSaveState
            settings.SaveState = isSaveState
            TweenService:Create(saveStateIndicator, TweenInfo.new(0.2), {
                Position = isSaveState and UDim2.new(1, -18, 0, 2) or UDim2.new(0, 2, 0, 2),
                BackgroundColor3 = isSaveState and settings.Theme.AccentColor or settings.Theme.TextColor
            }):Play()
            saveStateLabel.Text = "Сохранять состояние: " .. (isSaveState and "Вкл" or "Выкл")
        end
    end)

    local function showWarning(callback)
        local warningFrame = createInstance("Frame", {
            Size = UDim2.new(0, 300, 0, 150),
            Position = UDim2.new(0.5, -150, 0.5, -75),
            BackgroundColor3 = settings.Theme.PrimaryColor,
            BorderSizePixel = 0,
            Parent = screenGui,
            ZIndex = 100,
            BackgroundTransparency = 1
        })

        local uICornerWarning = createInstance("UICorner", {CornerRadius = UDim.new(0, 8), Parent = warningFrame})

        local warningLabel = createInstance("TextLabel", {
            Size = UDim2.new(1, -20, 0, 50),
            Position = UDim2.new(0, 10, 0, 10),
            BackgroundTransparency = 1,
            Text = "Вы уверены, что хотите закрыть GUI навсегда?",
            TextColor3 = settings.Theme.TextColor,
            Font = settings.Theme.Font,
            TextSize = 14,
            TextWrapped = true,
            Parent = warningFrame,
            ZIndex = 101
        })

        local confirmButton = createInstance("TextButton", {
            Size = UDim2.new(0, 100, 0, 30),
            Position = UDim2.new(0.5, -110, 1, -40),
            BackgroundColor3 = settings.Theme.AccentColor,
            Text = "Да",
            TextColor3 = settings.Theme.TextColor,
            Font = settings.Theme.Font,
            TextSize = 14,
            Parent = warningFrame,
            ZIndex = 101
        })

        local cancelButton = createInstance("TextButton", {
            Size = UDim2.new(0, 100, 0, 30),
            Position = UDim2.new(0.5, 10, 1, -40),
            BackgroundColor3 = settings.Theme.SecondaryColor,
            Text = "Нет",
            TextColor3 = settings.Theme.TextColor,
            Font = settings.Theme.Font,
            TextSize = 14,
            Parent = warningFrame,
            ZIndex = 101
        })

        TweenService:Create(warningFrame, TweenInfo.new(0.3), {BackgroundTransparency = 0}):Play()

        confirmButton.MouseButton1Click:Connect(function()
            TweenService:Create(warningFrame, TweenInfo.new(0.3), {BackgroundTransparency = 1}):Play()
            task.wait(0.3)
            warningFrame:Destroy()
            if callback then callback(true) end
        end)

        cancelButton.MouseButton1Click:Connect(function()
            TweenService:Create(warningFrame, TweenInfo.new(0.3), {BackgroundTransparency = 1}):Play()
            task.wait(0.3)
            warningFrame:Destroy()
            if callback then callback(false) end
        end)
    end

    local isVisible = true
    local isSettingsOpen = false
    local tabContainer, tabMenu = nil, nil

    closeButton.MouseButton1Click:Connect(function()
        showWarning(function(confirmed)
            if confirmed then
                TweenService:Create(mainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quart), {Position = UDim2.new(0.5, -300, 1, 100), BackgroundTransparency = 1}):Play()
                task.wait(0.5)
                screenGui:Destroy()
            end
        end)
    end)

    settingsButton.MouseButton1Click:Connect(function()
        isSettingsOpen = not isSettingsOpen
        TweenService:Create(settingsFrame, TweenInfo.new(0.3), {
            BackgroundTransparency = isSettingsOpen and 0 or 1,
            Visible = isSettingsOpen
        }):Play()
        if tabContainer then tabContainer.Visible = not isSettingsOpen end
        if tabMenu then tabMenu.Visible = not isSettingsOpen end
    end)

    local function bindToggleKey()
        UserInputService.InputBegan:Connect(function(input, processed)
            if not processed and input.KeyCode == settings.ToggleKey then
                isVisible = not isVisible
                TweenService:Create(mainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quart), {
                    Position = isVisible and UDim2.new(0.5, -300, 0.5, -200) or UDim2.new(0.5, -300, 1, 100),
                    BackgroundTransparency = isVisible and 0 or 1
                }):Play()
            end
        end)
    end
    bindToggleKey()

    local waitingForKey = false
    keybindButton.MouseButton1Click:Connect(function()
        if waitingForKey then return end
        waitingForKey = true
        keybindButton.Text = "Нажмите клавишу..."
        local connection
        connection = UserInputService.InputBegan:Connect(function(input, processed)
            if not processed and input.UserInputType == Enum.UserInputType.Keyboard then
                local newKey = input.KeyCode
                if newKey ~= Enum.KeyCode.Unknown and newKey ~= Enum.KeyCode.RightShift then
                    settings.ToggleKey = newKey
                    keybindButton.Text = newKey.Name
                else
                    keybindButton.Text = settings.ToggleKey.Name
                end
                waitingForKey = false
                connection:Disconnect()
            end
        end)
    end)

    tabMenu = createInstance("Frame", {
        Size = UDim2.new(0, 150, 1, -40),
        Position = UDim2.new(0, 0, 0, 40),
        BackgroundColor3 = settings.Theme.SecondaryColor,
        BorderSizePixel = 0,
        Parent = mainFrame,
        ZIndex = 2
    })

    local uiListLayoutTabs = createInstance("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = tabMenu
    })

    tabContainer = createInstance("Frame", {
        Size = UDim2.new(1, -150, 1, -40),
        Position = UDim2.new(0, 150, 0, 40),
        BackgroundTransparency = 1,
        Parent = mainFrame,
        ZIndex = 2
    })

    local function saveState()
        if not settings.SaveState then return end
        local state = {
            Position = {mainFrame.Position.X.Scale, mainFrame.Position.X.Offset, mainFrame.Position.Y.Scale, mainFrame.Position.Y.Offset},
            Theme = settings.ThemeName
        }
        pcall(function()
            writefile("EnderPlexState.json", HttpService:JSONEncode(state))
        end)
    end

    local function loadState()
        if not settings.SaveState then return end
        local success, content = pcall(function()
            return readfile("EnderPlexState.json")
        end)
        if success then
            local state = HttpService:JSONDecode(content)
            mainFrame.Position = UDim2.new(state.Position[1], state.Position[2], state.Position[3], state.Position[4])
            if state.Theme then window:SetTheme(state.Theme) end
        end
    end
    loadState()

    local window = {
        Frame = mainFrame,
        ScreenGui = screenGui,
        Tabs = {},
        Settings = settings,
        TabContainer = tabContainer
    }

    function window:CreateNotification(type, heading, body, autoRemove, autoRemoveTime, onClose)
        if type == nil or heading == nil or body == nil then return end
        local notif = Notification.new(type, heading, body, autoRemove, autoRemoveTime, onClose)
        return notif
    end

    function window:SetTheme(themeName)
        if themeName == "Light" then
            settings.Theme = {
                PrimaryColor = Color3.fromRGB(240, 240, 240),
                SecondaryColor = Color3.fromRGB(220, 220, 220),
                AccentColor = Color3.fromRGB(65, 105, 225),
                TextColor = Color3.fromRGB(30, 30, 30),
                ErrorColor = Color3.fromRGB(220, 50, 50),
                SuccessColor = Color3.fromRGB(50, 220, 50),
                InfoColor = Color3.fromRGB(255, 165, 0),
                ShadowColor = Color3.fromRGB(100, 100, 100),
                Font = Enum.Font.Gotham,
                FontBold = Enum.Font.GothamBold
            }
        else
            settings.Theme = defaultTheme
        end
        settings.ThemeName = themeName
        saveState()

        TweenService:Create(mainFrame, TweenInfo.new(0.3), {BackgroundColor3 = settings.Theme.PrimaryColor}):Play()
        TweenService:Create(titleBar, TweenInfo.new(0.3), {BackgroundColor3 = settings.Theme.SecondaryColor}):Play()
        TweenService:Create(titleLabel, TweenInfo.new(0.3), {TextColor3 = settings.Theme.TextColor}):Play()
        TweenService:Create(closeButton, TweenInfo.new(0.3), {BackgroundColor3 = settings.Theme.ErrorColor, TextColor3 = settings.Theme.TextColor}):Play()
        TweenService:Create(settingsButton, TweenInfo.new(0.3), {BackgroundColor3 = settings.Theme.SecondaryColor, TextColor3 = settings.Theme.TextColor}):Play()
        TweenService:Create(tabMenu, TweenInfo.new(0.3), {BackgroundColor3 = settings.Theme.SecondaryColor}):Play()
        TweenService:Create(shadow, TweenInfo.new(0.3), {ImageColor3 = settings.Theme.ShadowColor}):Play()
        TweenService:Create(settingsFrame, TweenInfo.new(0.3), {BackgroundColor3 = settings.Theme.SecondaryColor}):Play()
        TweenService:Create(settingsLabel, TweenInfo.new(0.3), {TextColor3 = settings.Theme.TextColor}):Play()
        TweenService:Create(keybindLabel, TweenInfo.new(0.3), {TextColor3 = settings.Theme.TextColor}):Play()
        TweenService:Create(keybindButton, TweenInfo.new(0.3), {BackgroundColor3 = settings.Theme.SecondaryColor, TextColor3 = settings.Theme.TextColor}):Play()
        for _, tab in ipairs(window.Tabs) do
            TweenService:Create(tab.Button, TweenInfo.new(0.3), {
                BackgroundColor3 = tab.Content.Visible and settings.Theme.AccentColor or settings.Theme.SecondaryColor,
                TextColor3 = settings.Theme.TextColor
            }):Play()
            for _, element in ipairs(tab.Elements) do
                if element:IsA("Frame") or element:IsA("TextButton") then
                    TweenService:Create(element, TweenInfo.new(0.3), {BackgroundColor3 = settings.Theme.SecondaryColor}):Play()
                    if element:IsA("TextButton") then
                        TweenService:Create(element, TweenInfo.new(0.3), {TextColor3 = settings.Theme.TextColor}):Play()
                    end
                end
            end
        end
    end

    function window:CreateTab(name)
        if type(name) ~= "string" then name = "Tab" end

        local tabButton = createInstance("TextButton", {
            Size = UDim2.new(1, -10, 0, 35),
            Position = UDim2.new(0, 5, 0, 0),
            BackgroundColor3 = settings.Theme.SecondaryColor,
            Text = name,
            TextColor3 = settings.Theme.TextColor,
            Font = settings.Theme.Font,
            TextSize = 14,
            Parent = tabMenu,
            ZIndex = 3,
            BackgroundTransparency = 1
        })

        TweenService:Create(tabButton, TweenInfo.new(0.3), {BackgroundTransparency = 0}):Play()

        local uICornerTab = createInstance("UICorner", {CornerRadius = UDim.new(0, 6), Parent = tabButton})

        local tabContent = createInstance("ScrollingFrame", {
            Size = UDim2.new(1, -10, 1, -10),
            Position = UDim2.new(0, 5, 0, 5),
            BackgroundTransparency = 1,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            ScrollBarThickness = 6,
            ScrollBarImageColor3 = settings.Theme.AccentColor,
            Visible = false,
            Parent = tabContainer,
            ZIndex = 2
        })

        local uiListLayoutContent = createInstance("UIListLayout", {
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 8),
            Parent = tabContent
        })

        uiListLayoutContent:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            tabContent.CanvasSize = UDim2.new(0, 0, 0, uiListLayoutContent.AbsoluteContentSize.Y)
        end)

        local tab = {Button = tabButton, Content = tabContent, Elements = {}}
        table.insert(window.Tabs, tab)

        tabButton.MouseButton1Click:Connect(function()
            for _, otherTab in ipairs(window.Tabs) do
                otherTab.Content.Visible = false
                TweenService:Create(otherTab.Button, TweenInfo.new(0.2), {BackgroundColor3 = settings.Theme.SecondaryColor}):Play()
            end
            tabContent.Visible = true
            TweenService:Create(tabButton, TweenInfo.new(0.2), {BackgroundColor3 = settings.Theme.AccentColor}):Play()
        end)

        tabButton.MouseEnter:Connect(function()
            if not tabContent.Visible then
                TweenService:Create(tabButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(
                    lerp(settings.Theme.SecondaryColor.R * 255, settings.Theme.AccentColor.R * 255, 0.3),
                    lerp(settings.Theme.SecondaryColor.G * 255, settings.Theme.AccentColor.G * 255, 0.3),
                    lerp(settings.Theme.SecondaryColor.B * 255, settings.Theme.AccentColor.B * 255, 0.3)
                )}):Play()
            end
        end)
        tabButton.MouseLeave:Connect(function()
            if not tabContent.Visible then
                TweenService:Create(tabButton, TweenInfo.new(0.2), {BackgroundColor3 = settings.Theme.SecondaryColor}):Play()
            end
        end)

        if #window.Tabs == 1 then
            tabContent.Visible = true
            tabButton.BackgroundColor3 = settings.Theme.AccentColor
        end

        function tab:CreateButton(text, callback, hotkey)
            if type(text) ~= "string" or type(callback) ~= "function" then return end

            local buttonFrame = createInstance("Frame", {
                Size = UDim2.new(1, 0, 0, 35),
                BackgroundTransparency = 1,
                Parent = tabContent,
                ZIndex = 3
            })

            local button = createInstance("TextButton", {
                Size = UDim2.new(1, -10, 1, 0),
                Position = UDim2.new(0, 5, 0, 0),
                BackgroundColor3 = settings.Theme.SecondaryColor,
                Text = text,
                TextColor3 = settings.Theme.TextColor,
                Font = settings.Theme.Font,
                TextSize = 14,
                Parent = buttonFrame,
                ZIndex = 4,
                BackgroundTransparency = 1
            })

            TweenService:Create(button, TweenInfo.new(0.3), {BackgroundTransparency = 0}):Play()

            local uICornerBtn = createInstance("UICorner", {CornerRadius = UDim.new(0, 6), Parent = button})

            local ripple = createInstance("Frame", {
                Size = UDim2.new(0, 0, 0, 0),
                Position = UDim2.new(0.5, 0, 0.5, 0),
                BackgroundColor3 = settings.Theme.AccentColor,
                BackgroundTransparency = 0.7,
                AnchorPoint = Vector2.new(0.5, 0.5),
                ZIndex = 5,
                Visible = false,
                Parent = button
            })

            local uICornerRipple = createInstance("UICorner", {CornerRadius = UDim.new(1, 0), Parent = ripple})

            button.MouseButton1Click:Connect(function()
                ripple.Visible = true
                TweenService:Create(ripple, TweenInfo.new(0.4), {Size = UDim2.new(2, 0, 2, 0), BackgroundTransparency = 1}):Play()
                task.wait(0.4)
                ripple.Visible = false
                ripple.Size = UDim2.new(0, 0, 0, 0)
                ripple.BackgroundTransparency = 0.7
                local success, err = pcall(callback)
                if not success then window:CreateNotification("error", "Ошибка", "Ошибка выполнения: " .. tostring(err), true, 5) end
            end)

            button.MouseEnter:Connect(function()
                TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = settings.Theme.AccentColor}):Play()
            end)
            button.MouseLeave:Connect(function()
                TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = settings.Theme.SecondaryColor}):Play()
            end)

            if hotkey and Enum.KeyCode[hotkey] then
                binds[button] = {Key = Enum.KeyCode[hotkey], Callback = callback}
                UserInputService.InputBegan:Connect(function(input, processed)
                    if not processed and input.KeyCode == Enum.KeyCode[hotkey] then
                        local success, err = pcall(callback)
                        if not success then window:CreateNotification("error", "Ошибка", "Ошибка горячей клавиши: " .. tostring(err), true, 5) end
                    end
                end)
            end

            table.insert(tab.Elements, buttonFrame)
            return button
        end

        function tab:CreateSlider(name, min, max, default, callback)
            if type(name) ~= "string" or type(min) ~= "number" or type(max) ~= "number" or type(default) ~= "number" or type(callback) ~= "function" then return end

            local sliderFrame = createInstance("Frame", {
                Size = UDim2.new(1, 0, 0, 60),
                BackgroundTransparency = 1,
                Parent = tabContent,
                ZIndex = 3
            })

            local label = createInstance("TextLabel", {
                Size = UDim2.new(1, -10, 0, 20),
                Position = UDim2.new(0, 5, 0, 0),
                BackgroundTransparency = 1,
                Text = name .. ": " .. default,
                TextColor3 = settings.Theme.TextColor,
                Font = settings.Theme.Font,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = sliderFrame,
                ZIndex = 4
            })

            local sliderBar = createInstance("Frame", {
                Size = UDim2.new(1, -10, 0, 10),
                Position = UDim2.new(0, 5, 0, 30),
                BackgroundColor3 = settings.Theme.SecondaryColor,
                Parent = sliderFrame,
                ZIndex = 4
            })

            local uICornerBar = createInstance("UICorner", {CornerRadius = UDim.new(0, 5), Parent = sliderBar})

            local fill = createInstance("Frame", {
                Size = UDim2.new((default - min) / (max - min), 0, 1, 0),
                BackgroundColor3 = settings.Theme.AccentColor,
                BorderSizePixel = 0,
                Parent = sliderBar,
                ZIndex = 5
            })

            local uICornerFill = createInstance("UICorner", {CornerRadius = UDim.new(0, 5), Parent = fill})

            local knob = createInstance("Frame", {
                Size = UDim2.new(0, 16, 0, 16),
                Position = UDim2.new((default - min) / (max - min), -8, 0, -3),
                BackgroundColor3 = settings.Theme.TextColor,
                Parent = sliderBar,
                ZIndex = 6
            })

            local uICornerKnob = createInstance("UICorner", {CornerRadius = UDim.new(0, 8), Parent = knob})

            local isDragging = false
            local lastUpdate = tick()
            sliderBar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isDragging = true
                    mainFrame.Draggable = false
                end
            end)

            sliderBar.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isDragging = false
                    mainFrame.Draggable = true
                end
            end)

            UserInputService.InputChanged:Connect(function(input)
                if isDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    if tick() - lastUpdate < 0.05 then return end
                    local relativeX = math.clamp((input.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X, 0, 1)
                    local value = math.floor(min + (max - min) * relativeX)
                    TweenService:Create(fill, TweenInfo.new(0.2), {Size = UDim2.new(relativeX, 0, 1, 0)}):Play()
                    TweenService:Create(knob, TweenInfo.new(0.2), {Position = UDim2.new(relativeX, -8, 0, -3)}):Play()
                    label.Text = name .. ": " .. value
                    local success, err = pcall(function() callback(value) end)
                    if not success then window:CreateNotification("error", "Ошибка", "Ошибка ползунка: " .. tostring(err), true, 5) end
                    lastUpdate = tick()
                end
            end)

            table.insert(tab.Elements, sliderFrame)
        end

        function tab:CreateDropdown(name, options, default, callback)
            if type(name) ~= "string" or type(options) ~= "table" or type(default) ~= "string" or type(callback) ~= "function" then return end

            local dropdownFrame = createInstance("Frame", {
                Size = UDim2.new(1, 0, 0, 35),
                BackgroundTransparency = 1,
                Parent = tabContent,
                ZIndex = 3
            })

            local dropdownButton = createInstance("TextButton", {
                Size = UDim2.new(1, -10, 0, 30),
                Position = UDim2.new(0, 5, 0, 0),
                BackgroundColor3 = settings.Theme.SecondaryColor,
                Text = name .. ": " .. default,
                TextColor3 = settings.Theme.TextColor,
                Font = settings.Theme.Font,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = dropdownFrame,
                ZIndex = 4,
                BackgroundTransparency = 1
            })

            TweenService:Create(dropdownButton, TweenInfo.new(0.3), {BackgroundTransparency = 0}):Play()

            local uICornerDrop = createInstance("UICorner", {CornerRadius = UDim.new(0, 6), Parent = dropdownButton})

            local dropdownList = createInstance("ScrollingFrame", {
                Size = UDim2.new(1, -10, 0, math.min(#options * 30, 120)),
                Position = UDim2.new(0, 5, 0, 35),
                BackgroundColor3 = settings.Theme.SecondaryColor,
                Visible = false,
                CanvasSize = UDim2.new(0, 0, 0, #options * 30),
                ScrollBarThickness = 4,
                ScrollBarImageColor3 = settings.Theme.AccentColor,
                Parent = tabContent,
                ZIndex = 10,
                BackgroundTransparency = 1
            })

            TweenService:Create(dropdownList, TweenInfo.new(0.3), {BackgroundTransparency = 0}):Play()

            local uICornerList = createInstance("UICorner", {CornerRadius = UDim.new(0, 6), Parent = dropdownList})

            local uiListLayoutDrop = createInstance("UIListLayout", {
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 2),
                Parent = dropdownList
            })

            for i, option in ipairs(options) do
                local item = createInstance("TextButton", {
                    Size = UDim2.new(1, 0, 0, 28),
                    BackgroundColor3 = settings.Theme.SecondaryColor,
                    Text = option,
                    TextColor3 = settings.Theme.TextColor,
                    Font = settings.Theme.Font,
                    TextSize = 14,
                    Parent = dropdownList,
                    ZIndex = 11,
                    Position = UDim2.new(0, 0, 0, (i-1) * 30),
                    BackgroundTransparency = 1
                })

                TweenService:Create(item, TweenInfo.new(0.3), {BackgroundTransparency = 0}):Play()

                local uICornerItem = createInstance("UICorner", {CornerRadius = UDim.new(0, 4), Parent = item})

                item.MouseEnter:Connect(function()
                    TweenService:Create(item, TweenInfo.new(0.2), {BackgroundColor3 = settings.Theme.AccentColor}):Play()
                end)
                item.MouseLeave:Connect(function()
                    TweenService:Create(item, TweenInfo.new(0.2), {BackgroundColor3 = settings.Theme.SecondaryColor}):Play()
                end)

                item.MouseButton1Click:Connect(function()
                    dropdownButton.Text = name .. ": " .. option
                    dropdownList.Visible = false
                    TweenService:Create(dropdownList, TweenInfo.new(0.3), {BackgroundTransparency = 1}):Play()
                    local success, err = pcall(function() callback(option) end)
                    if not success then window:CreateNotification("error", "Ошибка", "Ошибка списка: " .. tostring(err), true, 5) end
                end)
            end

            dropdownButton.MouseButton1Click:Connect(function()
                dropdownList.Visible = not dropdownList.Visible
                TweenService:Create(dropdownList, TweenInfo.new(0.3), {BackgroundTransparency = dropdownList.Visible and 0 or 1}):Play()
            end)

            UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 and dropdownList.Visible then
                    local mousePos = input.Position
                    local btnPos = dropdownButton.AbsolutePosition
                    local btnSize = dropdownButton.AbsoluteSize
                    local listPos = dropdownList.AbsolutePosition
                    local listSize = dropdownList.AbsoluteSize
                    local inButton = mousePos.X >= btnPos.X and mousePos.X <= btnPos.X + btnSize.X and
                        mousePos.Y >= btnPos.Y and mousePos.Y <= btnPos.Y + btnSize.Y
                    local inList = mousePos.X >= listPos.X and mousePos.X <= listPos.X + listSize.X and
                        mousePos.Y >= listPos.Y and mousePos.Y <= listPos.Y + listSize.Y
                    if not (inButton or inList) then
                        dropdownList.Visible = false
                        TweenService:Create(dropdownList, TweenInfo.new(0.3), {BackgroundTransparency = 1}):Play()
                    end
                end
            end)

            table.insert(tab.Elements, dropdownFrame)
        end

        function tab:CreateToggle(name, default, callback)
            if type(name) ~= "string" or type(default) ~= "boolean" or type(callback) ~= "function" then return end

            local toggleFrame = createInstance("Frame", {
                Size = UDim2.new(1, 0, 0, 35),
                BackgroundTransparency = 1,
                Parent = tabContent,
                ZIndex = 3
            })

            local toggleLabel = createInstance("TextLabel", {
                Size = UDim2.new(1, -60, 1, 0),
                Position = UDim2.new(0, 5, 0, 0),
                BackgroundTransparency = 1,
                Text = name .. ": " .. (default and "Вкл" or "Выкл"),
                TextColor3 = settings.Theme.TextColor,
                Font = settings.Theme.Font,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = toggleFrame,
                ZIndex = 4
            })

            local toggleButton = createInstance("Frame", {
                Size = UDim2.new(0, 40, 0, 20),
                Position = UDim2.new(1, -45, 0, 7),
                BackgroundColor3 = settings.Theme.SecondaryColor,
                Parent = toggleFrame,
                ZIndex = 4
            })

            local uICornerToggle = createInstance("UICorner", {CornerRadius = UDim.new(0, 10), Parent = toggleButton})

            local toggleIndicator = createInstance("Frame", {
                Size = UDim2.new(0, 16, 0, 16),
                Position = default and UDim2.new(1, -18, 0, 2) or UDim2.new(0, 2, 0, 2),
                BackgroundColor3 = default and settings.Theme.AccentColor or settings.Theme.TextColor,
                Parent = toggleButton,
                ZIndex = 5
            })

            local uICornerIndicator = createInstance("UICorner", {CornerRadius = UDim.new(0, 8), Parent = toggleIndicator})

            local isToggled = default
            toggleButton.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isToggled = not isToggled
                    toggleLabel.Text = name .. ": " .. (isToggled and "Вкл" or "Выкл")
                    TweenService:Create(toggleIndicator, TweenInfo.new(0.2), {
                        Position = isToggled and UDim2.new(1, -18, 0, 2) or UDim2.new(0, 2, 0, 2),
                        BackgroundColor3 = isToggled and settings.Theme.AccentColor or settings.Theme.TextColor
                    }):Play()
                    local success, err = pcall(function() callback(isToggled) end)
                    if not success then window:CreateNotification("error", "Ошибка", "Ошибка переключателя: " .. tostring(err), true, 5) end
                end
            end)

            table.insert(tab.Elements, toggleFrame)
        end

        function tab:CreateTextBox(name, default, callback)
            if type(name) ~= "string" or type(default) ~= "string" or type(callback) ~= "function" then return end

            local textBoxFrame = createInstance("Frame", {
                Size = UDim2.new(1, 0, 0, 35),
                BackgroundTransparency = 1,
                Parent = tabContent,
                ZIndex = 3
            })

            local textBoxLabel = createInstance("TextLabel", {
                Size = UDim2.new(0.5, -5, 1, 0),
                Position = UDim2.new(0, 5, 0, 0),
                BackgroundTransparency = 1,
                Text = name,
                TextColor3 = settings.Theme.TextColor,
                Font = settings.Theme.Font,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = textBoxFrame,
                ZIndex = 4
            })

            local textBox = createInstance("TextBox", {
                Size = UDim2.new(0.5, -5, 0, 30),
                Position = UDim2.new(0.5, 0, 0, 0),
                BackgroundColor3 = settings.Theme.SecondaryColor,
                Text = default,
                TextColor3 = settings.Theme.TextColor,
                Font = settings.Theme.Font,
                TextSize = 14,
                Parent = textBoxFrame,
                ZIndex = 4
            })

            local uICornerTextBox = createInstance("UICorner", {CornerRadius = UDim.new(0, 6), Parent = textBox})

            textBox.FocusLost:Connect(function(enterPressed)
                if enterPressed then
                    local success, err = pcall(function() callback(textBox.Text) end)
                    if not success then window:CreateNotification("error", "Ошибка", "Ошибка текстового поля: " .. tostring(err), true, 5) end
                end
            end)

            table.insert(tab.Elements, textBoxFrame)
        end

        function tab:CreateMultiLineTextBox(name, default, callback)
            if type(name) ~= "string" or type(default) ~= "string" or type(callback) ~= "function" then return end

            local textBoxFrame = createInstance("Frame", {
                Size = UDim2.new(1, 0, 0, 100),
                BackgroundTransparency = 1,
                Parent = tabContent,
                ZIndex = 3
            })

            local textBoxLabel = createInstance("TextLabel", {
                Size = UDim2.new(1, -10, 0, 20),
                Position = UDim2.new(0, 5, 0, 0),
                BackgroundTransparency = 1,
                Text = name,
                TextColor3 = settings.Theme.TextColor,
                Font = settings.Theme.Font,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = textBoxFrame,
                ZIndex = 4
            })

            local textBox = createInstance("TextBox", {
                Size = UDim2.new(1, -10, 0, 80),
                Position = UDim2.new(0, 5, 0, 20),
                BackgroundColor3 = settings.Theme.SecondaryColor,
                Text = default,
                TextColor3 = settings.Theme.TextColor,
                Font = settings.Theme.Font,
                TextSize = 14,
                TextWrapped = true,
                MultiLine = true,
                Parent = textBoxFrame,
                ZIndex = 4
            })

            local uICornerTextBox = createInstance("UICorner", {CornerRadius = UDim.new(0, 6), Parent = textBox})

            textBox.FocusLost:Connect(function(enterPressed)
                if enterPressed then
                    local success, err = pcall(function() callback(textBox.Text) end)
                    if not success then window:CreateNotification("error", "Ошибка", "Ошибка многострочного поля: " .. tostring(err), true, 5) end
                end
            end)

            table.insert(tab.Elements, textBoxFrame)
        end

        function tab:CreateSearchableDropdown(name, options, default, callback)
            if type(name) ~= "string" or type(options) ~= "table" or type(default) ~= "string" or type(callback) ~= "function" then return end

            local dropdownFrame = createInstance("Frame", {
                Size = UDim2.new(1, 0, 0, 35),
                BackgroundTransparency = 1,
                Parent = tabContent,
                ZIndex = 3
            })

            local dropdownButton = createInstance("TextButton", {
                Size = UDim2.new(1, -10, 0, 30),
                Position = UDim2.new(0, 5, 0, 0),
                BackgroundColor3 = settings.Theme.SecondaryColor,
                Text = name .. ": " .. default,
                TextColor3 = settings.Theme.TextColor,
                Font = settings.Theme.Font,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = dropdownFrame,
                ZIndex = 4,
                BackgroundTransparency = 1
            })

            TweenService:Create(dropdownButton, TweenInfo.new(0.3), {BackgroundTransparency = 0}):Play()

            local uICornerDrop = createInstance("UICorner", {CornerRadius = UDim.new(0, 6), Parent = dropdownButton})

            local dropdownList = createInstance("ScrollingFrame", {
                Size = UDim2.new(1, -10, 0, math.min(#options * 30, 150)),
                Position = UDim2.new(0, 5, 0, 35),
                BackgroundColor3 = settings.Theme.SecondaryColor,
                Visible = false,
                CanvasSize = UDim2.new(0, 0, 0, #options * 30),
                ScrollBarThickness = 4,
                ScrollBarImageColor3 = settings.Theme.AccentColor,
                Parent = tabContent,
                ZIndex = 10,
                BackgroundTransparency = 1
            })

            TweenService:Create(dropdownList, TweenInfo.new(0.3), {BackgroundTransparency = 0}):Play()

            local uICornerList = createInstance("UICorner", {CornerRadius = UDim.new(0, 6), Parent = dropdownList})

            local searchBox = createInstance("TextBox", {
                Size = UDim2.new(1, -10, 0, 30),
                Position = UDim2.new(0, 5, 0, 0),
                BackgroundColor3 = settings.Theme.SecondaryColor,
                Text = "",
                TextColor3 = settings.Theme.TextColor,
                Font = settings.Theme.Font,
                TextSize = 14,
                PlaceholderText = "Поиск...",
                Parent = dropdownList,
                ZIndex = 11,
                BackgroundTransparency = 1
            })

            TweenService:Create(searchBox, TweenInfo.new(0.3), {BackgroundTransparency = 0}):Play()

            local uICornerSearch = createInstance("UICorner", {CornerRadius = UDim.new(0, 6), Parent = searchBox})

            local uiListLayoutDrop = createInstance("UIListLayout", {
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 2),
                Parent = dropdownList
            })

            local filteredOptions = {}
            for i, option in ipairs(options) do
                table.insert(filteredOptions, {Text = option, Index = i})
                local item = createInstance("TextButton", {
                    Size = UDim2.new(1, 0, 0, 28),
                    BackgroundColor3 = settings.Theme.SecondaryColor,
                    Text = option,
                    TextColor3 = settings.Theme.TextColor,
                    Font = settings.Theme.Font,
                    TextSize = 14,
                    Parent = dropdownList,
                    ZIndex = 11,
                    Position = UDim2.new(0, 0, 0, (i) * 30),
                    Visible = true,
                    BackgroundTransparency = 1
                })

                TweenService:Create(item, TweenInfo.new(0.3), {BackgroundTransparency = 0}):Play()

                local uICornerItem = createInstance("UICorner", {CornerRadius = UDim.new(0, 4), Parent = item})

                item.MouseEnter:Connect(function()
                    TweenService:Create(item, TweenInfo.new(0.2), {BackgroundColor3 = settings.Theme.AccentColor}):Play()
                end)
                item.MouseLeave:Connect(function()
                    TweenService:Create(item, TweenInfo.new(0.2), {BackgroundColor3 = settings.Theme.SecondaryColor}):Play()
                end)

                item.MouseButton1Click:Connect(function()
                    dropdownButton.Text = name .. ": " .. option
                    dropdownList.Visible = false
                    TweenService:Create(dropdownList, TweenInfo.new(0.3), {BackgroundTransparency = 1}):Play()
                    local success, err = pcall(function() callback(option) end)
                    if not success then window:CreateNotification("error", "Ошибка", "Ошибка списка: " .. tostring(err), true, 5) end
                end)
            end

            searchBox.Changed:Connect(function(property)
                if property == "Text" then
                    local searchText = string.lower(searchBox.Text)
                    for i, item in ipairs(dropdownList:GetChildren()) do
                        if item:IsA("TextButton") then
                            local text = string.lower(item.Text)
                            item.Visible = searchText == "" or string.find(text, searchText) ~= nil
                        end
                    end
                    uiListLayoutDrop:ApplyLayout()
                end
            end)

            dropdownButton.MouseButton1Click:Connect(function()
                dropdownList.Visible = not dropdownList.Visible
                TweenService:Create(dropdownList, TweenInfo.new(0.3), {BackgroundTransparency = dropdownList.Visible and 0 or 1}):Play()
            end)

            UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 and dropdownList.Visible then
                    local mousePos = input.Position
                    local btnPos = dropdownButton.AbsolutePosition
                    local btnSize = dropdownButton.AbsoluteSize
                    local listPos = dropdownList.AbsolutePosition
                    local listSize = dropdownList.AbsoluteSize
                    local inButton = mousePos.X >= btnPos.X and mousePos.X <= btnPos.X + btnSize.X and
                        mousePos.Y >= btnPos.Y and mousePos.Y <= btnPos.Y + btnSize.Y
                    local inList = mousePos.X >= listPos.X and mousePos.X <= listPos.X + listSize.X and
                        mousePos.Y >= listPos.Y and mousePos.Y <= listPos.Y + listSize.Y
                    if not (inButton or inList) then
                        dropdownList.Visible = false
                        TweenService:Create(dropdownList, TweenInfo.new(0.3), {BackgroundTransparency = 1}):Play()
                    end
                end
            end)

            table.insert(tab.Elements, dropdownFrame)
        end

        function tab:CreateColorPicker(name, default, callback)
            if type(name) ~= "string" or type(default) ~= "Color3" or type(callback) ~= "function" then return end

            local colorPickerFrame = createInstance("Frame", {
                Size = UDim2.new(1, 0, 0, 35),
                BackgroundTransparency = 1,
                Parent = tabContent,
                ZIndex = 3
            })

            local colorLabel = createInstance("TextLabel", {
                Size = UDim2.new(1, -40, 1, 0),
                Position = UDim2.new(0, 5, 0, 0),
                BackgroundTransparency = 1,
                Text = name,
                TextColor3 = settings.Theme.TextColor,
                Font = settings.Theme.Font,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = colorPickerFrame,
                ZIndex = 4
            })

            local colorButton = createInstance("Frame", {
                Size = UDim2.new(0, 30, 0, 30),
                Position = UDim2.new(1, -35, 0, 2),
                BackgroundColor3 = default,
                Parent = colorPickerFrame,
                ZIndex = 4
            })

            local uICornerColor = createInstance("UICorner", {CornerRadius = UDim.new(0, 6), Parent = colorButton})

            local colorPicker = createInstance("Frame", {
                Size = UDim2.new(0, 150, 0, 150),
                Position = UDim2.new(1, -155, 0, 35),
                BackgroundColor3 = settings.Theme.SecondaryColor,
                Visible = false,
                Parent = tabContent,
                ZIndex = 10,
                BackgroundTransparency = 1
            })

            TweenService:Create(colorPicker, TweenInfo.new(0.3), {BackgroundTransparency = 0}):Play()

            local uICornerPicker = createInstance("UICorner", {CornerRadius = UDim.new(0, 6), Parent = colorPicker})

            local hueBar = createInstance("Frame", {
                Size = UDim2.new(0, 20, 1, -10),
                Position = UDim2.new(0, 5, 0, 5),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = colorPicker,
                ZIndex = 11
            })

            local uIGradientHue = createInstance("UIGradient", {
                Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
                    ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)),
                    ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)),
                    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
                    ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)),
                    ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
                },
                Parent = hueBar
            })

            local hueIndicator = createInstance("Frame", {
                Size = UDim2.new(1, 0, 0, 2),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = hueBar,
                ZIndex = 12
            })

            local saturationValue = createInstance("Frame", {
                Size = UDim2.new(1, -30, 1, -10),
                Position = UDim2.new(0, 25, 0, 5),
                BackgroundColor3 = default,
                Parent = colorPicker,
                ZIndex = 11
            })

            local uIGradientSV = createInstance("UIGradient", {
                Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                    ColorSequenceKeypoint.new(1, default)
                },
                Rotation = 90,
                Parent = saturationValue
            })

            local svIndicator = createInstance("Frame", {
                Size = UDim2.new(0, 8, 0, 8),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                Parent = saturationValue,
                ZIndex = 12
            })

            local uICornerSV = createInstance("UICorner", {CornerRadius = UDim.new(0, 4), Parent = svIndicator})

            local function updateColor()
                local hue = hueIndicator.Position.Y.Scale
                local sat = svIndicator.Position.X.Scale
                local val = 1 - svIndicator.Position.Y.Scale
                local color = Color3.fromHSV(hue, sat, val)
                TweenService:Create(colorButton, TweenInfo.new(0.2), {BackgroundColor3 = color}):Play()
                uIGradientSV.Color = ColorSequence.new{
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromHSV(hue, 1, 1))
                }
                local success, err = pcall(function() callback(color) end)
                if not success then window:CreateNotification("error", "Ошибка", "Ошибка выбора цвета: " .. tostring(err), true, 5) end
            end

            local isDraggingHue = false
            hueBar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isDraggingHue = true
                    mainFrame.Draggable = false
                end
            end)
            hueBar.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isDraggingHue = false
                    mainFrame.Draggable = true
                end
            end)

            local isDraggingSV = false
            saturationValue.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isDraggingSV = true
                    mainFrame.Draggable = false
                end
            end)
            saturationValue.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isDraggingSV = false
                    mainFrame.Draggable = true
                end
            end)

            UserInputService.InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement then
                    if isDraggingHue then
                        local relativeY = math.clamp((input.Position.Y - hueBar.AbsolutePosition.Y) / hueBar.AbsoluteSize.Y, 0, 1)
                        TweenService:Create(hueIndicator, TweenInfo.new(0.1), {Position = UDim2.new(0, 0, relativeY, 0)}):Play()
                        updateColor()
                    end
                    if isDraggingSV then
                        local relativeX = math.clamp((input.Position.X - saturationValue.AbsolutePosition.X) / saturationValue.AbsoluteSize.X, 0, 1)
                        local relativeY = math.clamp((input.Position.Y - saturationValue.AbsolutePosition.Y) / saturationValue.AbsoluteSize.Y, 0, 1)
                        TweenService:Create(svIndicator, TweenInfo.new(0.1), {Position = UDim2.new(relativeX, 0, relativeY, 0)}):Play()
                        updateColor()
                    end
                end
            end)

            colorButton.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    colorPicker.Visible = not colorPicker.Visible
                    TweenService:Create(colorPicker, TweenInfo.new(0.3), {BackgroundTransparency = colorPicker.Visible and 0 or 1}):Play()
                end
            end)

            table.insert(tab.Elements, colorPickerFrame)
        end

        function tab:CreateLabel(text)
            if type(text) ~= "string" then return end

            local labelFrame = createInstance("Frame", {
                Size = UDim2.new(1, 0, 0, 30),
                BackgroundTransparency = 1,
                Parent = tabContent,
                ZIndex = 3
            })

            local label = createInstance("TextLabel", {
                Size = UDim2.new(1, -10, 1, 0),
                Position = UDim2.new(0, 5, 0, 0),
                BackgroundTransparency = 1,
                Text = text,
                TextColor3 = settings.Theme.TextColor,
                Font = settings.Theme.Font,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextWrapped = true,
                Parent = labelFrame,
                ZIndex = 4
            })

            table.insert(tab.Elements, labelFrame)
        end

        function tab:CreateRadioButtons(name, options, default, callback)
            if type(name) ~= "string" or type(options) ~= "table" or type(default) ~= "string" or type(callback) ~= "function" then return end

            local radioFrame = createInstance("Frame", {
                Size = UDim2.new(1, 0, 0, 30 + (#options * 30)),
                BackgroundTransparency = 1,
                Parent = tabContent,
                ZIndex = 3
            })

            local radioLabel = createInstance("TextLabel", {
                Size = UDim2.new(1, -10, 0, 20),
                Position = UDim2.new(0, 5, 0, 0),
                BackgroundTransparency = 1,
                Text = name,
                TextColor3 = settings.Theme.TextColor,
                Font = settings.Theme.Font,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = radioFrame,
                ZIndex = 4
            })

            local selectedOption = default
            for i, option in ipairs(options) do
                local radioButton = createInstance("Frame", {
                    Size = UDim2.new(0, 20, 0, 20),
                    Position = UDim2.new(0, 5, 0, 25 + (i-1) * 30),
                    BackgroundColor3 = settings.Theme.SecondaryColor,
                    Parent = radioFrame,
                    ZIndex = 4
                })

                local uICornerRadio = createInstance("UICorner", {CornerRadius = UDim.new(0, 10), Parent = radioButton})

                local indicator = createInstance("Frame", {
                    Size = UDim2.new(0, 12, 0, 12),
                    Position = UDim2.new(0.5, -6, 0.5, -6),
                    BackgroundColor3 = option == default and settings.Theme.AccentColor or Color3.fromRGB(0, 0, 0),
                    BackgroundTransparency = option == default and 0 or 1,
                    AnchorPoint = Vector2.new(0.5, 0.5),
                    Parent = radioButton,
                    ZIndex = 5
                })

                local uICornerIndicator = createInstance("UICorner", {CornerRadius = UDim.new(0, 6), Parent = indicator})

                local labelOption = createInstance("TextLabel", {
                    Size = UDim2.new(1, -30, 0, 20),
                    Position = UDim2.new(0, 30, 0, 25 + (i-1) * 30),
                    BackgroundTransparency = 1,
                    Text = option,
                    TextColor3 = settings.Theme.TextColor,
                    Font = settings.Theme.Font,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                    Parent = radioFrame,
                    ZIndex = 4
                })

                radioButton.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        selectedOption = option
                        for _, otherButton in ipairs(radioFrame:GetChildren()) do
                            if otherButton:IsA("Frame") and otherButton ~= radioButton then
                                local otherIndicator = otherButton:FindFirstChildOfClass("Frame")
                                if otherIndicator then
                                    TweenService:Create(otherIndicator, TweenInfo.new(0.2), {BackgroundTransparency = 1}):Play()
                                end
                            end
                        end
                        TweenService:Create(indicator, TweenInfo.new(0.2), {BackgroundTransparency = 0, BackgroundColor3 = settings.Theme.AccentColor}):Play()
                        local success, err = pcall(function() callback(option) end)
                        if not success then window:CreateNotification("error", "Ошибка", "Ошибка радиокнопки: " .. tostring(err), true, 5) end
                    end
                end)
            end

            table.insert(tab.Elements, radioFrame)
        end

        function tab:ChangeBind(element, newKey)
            if not binds[element] or not Enum.KeyCode[newKey] then return end
            binds[element].Key = Enum.KeyCode[newKey]
            UserInputService.InputBegan:Connect(function(input, processed)
                if not processed and input.KeyCode == Enum.KeyCode[newKey] then
                    local success, err = pcall(binds[element].Callback)
                    if not success then window:CreateNotification("error", "Ошибка", "Ошибка бинда: " .. tostring(err), true, 5) end
                end
            end)
            window:CreateNotification("success", "Бинд изменён", "Новый бинд: " .. newKey, true, 3)
        end

        function tab:RemoveBind(element)
            if binds[element] then
                binds[element] = nil
                window:CreateNotification("info", "Бинд удалён", "Бинд для элемента удалён.", true, 3)
            end
        end

        return tab
    end

    function window:Destroy()
        TweenService:Create(mainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quart), {Position = UDim2.new(0.5, -300, 1, 100), BackgroundTransparency = 1}):Play()
        task.wait(0.5)
        local success, err = pcall(function() screenGui:Destroy() end)
        if not success then window:CreateNotification("error", "Ошибка", "Ошибка уничтожения: " .. tostring(err), true, 5) end
    end

    -- Обработка биндов
    UserInputService.InputBegan:Connect(function(input, processed)
        if not processed then
            for element, bind in pairs(binds) do
                if input.KeyCode == bind.Key then
                    local success, err = pcall(bind.Callback)
                    if not success then window:CreateNotification("error", "Ошибка", "Ошибка бинда: " .. tostring(err), true, 5) end
                end
            end
        end
    end)

    return window
end

return EnderPlex
